###############################################################################
################################COMMON ALIASES ###############################
###############################################################################
alias _='sudo'
alias .="pwd"
alias ..="cd .."
alias ../="cd ../"
alias ...="cd ../.."
alias .../="cd ../../"
alias /-="cd -"
alias /="cd /"
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias -- -='cd -'
alias alais="alias"
if check_cmd fortune; then
    alias bofh="fortune $XDG_DATA_HOME/fortunes/bofh"
fi
alias bye="echo 'bye';exit"
alias cls="clear"
alias csl="clear"
alias cp="cp -ivRL"
alias del="rm -v -i"
alias df="df -h"
if check_cmd emacs; then
    alias emacs="emacs -nw"
fi
alias g="egrep -i"
if check_cmd gcc; then
alias gcc="gcc -Wall -W -Wpointer-arith -Wbad-function-cast -std=c99"
alias gcc_debug="gcc -ggdb3"
alias gcc_optimize="gcc -fforce-mem -fforce-addr -finline-functions \
    -fstrength-reduce  -floop-optimize -O3"
alias gcc_wall="gcc -Wall -Wpointer-arith -Wcast-qual -Wcast-align \
    -Wconversion -Waggregate-return -Wstrict-prototypes \
    -Wmissing-prototypes -Wmissing-declarations \
    -Wredundant-decls -Winline -Wnested-externs -std=c99 \
    -march=i686 -pipe"
fi
alias ff="find . -name $*"
alias j="jobs -l"
alias l="ls -lA --color=always"
alias la="ls -aF --color=always"
alias ll="ls -lAFhHo --color=always"
alias log_tcpdump="clear ; exec tcpdump -s 2000 -n -i eth0"
alias log_messages="clear; exec tail -f /var/log/messages --follow=name --retry"
alias ls="ls -FGH"
alias sl="ls -FGH"
alias m="$PAGER"
alias maek="make"
alias md="mkdir -v -p"
alias mkdir="mkdir -v -p"
alias mess="clear ; tail -f /var/log/messages"
alias more="$PAGER"
alias msgcheck="msgfmt -o /dev/null --statistics --strict --verbose"
alias mute="mixer pcm 0:0"
alias mv="mv -vi"
alias pgr="$PAGER"
alias please='sudo'
if check_cmd drill; then
    alias publicip4='drill -4 -Q myip.opendns.com @resolver1.opendns.com A'
    alias publicip6='drill -6 -Q myip.opendns.com @resolver1.opendns.com AAAA'
elif check_cmd dig; then
    alias publicip4='dig -4 myip.opendns.com A @resolver1.opendns.com +short'
    alias publicip6='dig -6 myip.opendns.com AAAA @resolver1.opendns.com +short'
elif check_cmd curl; then
    alias publicip4="curl https://icanhazip.com"
    alias publicip6="curl https://ipv6.icanhazip.com"
fi
alias rd="rmdir -v"
alias rm="rm -v -i"
alias rmdir="rmdir -v"
alias today="date '+%Y-%m-%d'"
alias x="exit"
e() {
    if check_cmd vim; then
        vim "$@"
    elif check_cmd vi; then
        vi "$@"
    fi
}
rfcget() {
    if check_cmd curl; then
        curl https://www.rfc-editor.org/rfc/rfc"$1".txt | $PAGER
    elif check_cmd fetch; then
        fetch -o - https://www.rfc-editor.org/rfc/rfc"$1".txt | $PAGER
    fi
}
v() {
    if check_cmd batcat; then
        batcat --theme Nord "$@"
    elif check_cmd bat; then
        bat --theme Nord "$@"
    elif check_cmd view; then
        view "$@"
    else
        cat "$@"
    fi
}

gi() {
    curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/\$@ ;
}

###############################################################################
##############################TERMINAL ALIASES ###############################
###############################################################################
#alias vt    	'tar tvf'
#alias xt    	'tar xvf'
#alias ct    	'tar cvf'
#alias zv    	'unzip -v'
#alias zt    	'unzip -t'
###############################################################################
#################################NMAP ALIASES #################################
###############################################################################
if check_cmd nmap; then
    alias nmap_open_ports="nmap --open"
    alias nmap_list_interfaces="nmap --iflist"
    alias nmap_slow="${SUDO}nmap -sS -v -T1"
    alias nmap_fin="${SUDO}nmap -sF -v"
    alias nmap_full="${SUDO}nmap -sS -T4 -PE -PP -PS80,443 -PY -g 53 -A -p1-65535 -v"
    alias nmap_check_for_firewall="${SUDO}nmap -sA -p1-65535 -v -T4"
    alias nmap_ping_through_firewall="${SUDO}nmap -PS -PA"
    alias nmap_fast="${SUDO}nmap -F -T5 --version-light --top-ports 300"
    alias nmap_detect_versions="${SUDO}nmap -sV -p1-65535 -O --osscan-guess -T4 -Pn"
    alias nmap_check_for_vulns="${SUDO}nmap --script=vuln"
    alias nmap_full_udp="${SUDO}nmap -sS -sU -T4 -A -v -PE -PS22,25,80 -PA21,23,80,443,3389"
    alias nmap_traceroute="${SUDO}nmap -sP -PE -PS22,25,80 -PA21,23,80,3389 -PU -PO --traceroute"
    alias nmap_full_with_scripts="${SUDO}nmap -sS -sU -T4 -A -v -PE -PP -PS21,22,23,25,80,113,31339 -PA80,113,443,10042 -PO --script all"
    alias nmap_web_safe_osscan="${SUDO}nmap -p 80,443 -O -v --osscan-guess --fuzzy"
    alias nmap_ping_scan="nmap -n -sP"
fi
###############################################################################
#################################VAGRANT ALIASES ##############################
###############################################################################
if check_cmd vagrant; then
    alias vgi="vagrant init"
    alias vup="vagrant up"
    alias vd="vagrant destroy"
    alias vdf="vagrant destroy -f"
    alias vssh="vagrant ssh"
    alias vsshc="vagrant ssh-config"
    alias vrdp="vagrant rdp"
    alias vh="vagrant halt"
    alias vssp="vagrant suspend"
    alias vst="vagrant status"
    alias vre="vagrant resume"
    alias vgs="vagrant global-status"
    alias vpr="vagrant provision"
    alias vr="vagrant reload"
    alias vrp="vagrant reload --provision"
    alias vp="vagrant push"
    alias vsh="vagrant share"
    alias vba="vagrant box add"
    alias vbr="vagrant box remove"
    alias vbl="vagrant box list"
    alias vbo="vagrant box outdated"
    alias vbu="vagrant box update"
    alias vpli="vagrant plugin install"
    alias vpll="vagrant plugin list"
    alias vplun="vagrant plugin uninstall"
    alias vplu="vagrant plugin update"
fi
###############################################################################
#################################rsync ALIASES ################################
###############################################################################
if check_cmd rsync; then
    alias rsync-copy="rsync -avz --progress -h"
    alias rsync-move="rsync -avz --progress -h --remove-source-files"
    alias rsync-update="rsync -avzu --progress -h"
    alias rsync-synchronize="rsync -avzu --delete --progress -h"

    cpv() {
        rsync -pogbr -hhh --backup-dir=/tmp/rsync -e /dev/null --progress "$@"
    }
fi
###############################################################################
#################################ANSIBLE ALIASES ##############################
###############################################################################
if check_cmd ansible; then
    # Functions
    ansible-version() {
        ansible --version
    }

    ansible-role-init() {
        if ! [ -z $1 ] ; then
            echo "Ansible Role : $1 Creating...."
            ansible-galaxy init $1
            tree $1
        else
            echo "Usage : ansible-role-init <role name>"
            echo "Example : ansible-role-init role1"
        fi
    }

    # Alias
    alias a='ansible '
    alias aconf='ansible-config '
    alias acon='ansible-console '
    alias aver='ansible-version'
    alias arinit='ansible-role-init'
    alias ap='ansible-playbook '
    alias ainv='ansible-inventory '
    alias adoc='ansible-doc '
    alias al='ansible-pull '
    alias aval='ansible-vault'
    alias avc='ansible-vault create'
    alias ave='ansible-vault edit'
    alias avr='ansible-vault rekey'
    alias avenc='ansible-vault encrypt'
    alias avdec='ansible-vault decrypt'
    alias avv='ansible-vault view'
    alias aga='ansible-galaxy'
    alias agad='ansible-galaxy delete'
    alias agai='ansible-galaxy install'
    alias agaim='ansible-galaxy import'
    alias againf='ansible-galaxy info'
    alias agal='ansible-galaxy list'
    alias agalog='ansible-galaxy login'
    alias agar='ansible-galaxy remove'
    alias agas='ansible-galaxy search'
fi
###############################################################################
#################################ARCANIST ALIASES##############################
###############################################################################
if check_cmd arc; then
    alias ara='arc amend'
    alias arb='arc branch'
    alias arco='arc cover'
    alias arci='arc commit'
    alias ard='arc diff'
    alias ardc='arc diff --create'
    alias ardnu='arc diff --nounit'
    alias ardnupc='arc diff --nounit --plan-changes'
    alias ardpc='arc diff --plan-changes'
    alias ardp='arc diff --preview' # creates a new diff in the phab interface
    alias are='arc export'
    alias arh='arc help'
    alias arl='arc land'
    alias arli='arc lint'
    alias arls='arc list'

    ardu() {
        arc diff --update "${1:t}"    # Both `ardu https://arcanist-url.com/<REVISION>`, and `ardu <REVISION>` work.
    }

    arpa() {
        arc patch "${1:t}"            # Both `arpa https://arcanist-url.com/<REVISION>`, and `arpa <REVISION>` work.
    }
fi
###############################################################################
#################################base64 ALIASES################################
###############################################################################
if check_cmd base64; then
    encode64() {
        if [[ $# -eq 0 ]]; then
            cat | base64
        else
            printf '%s' $1 | base64
        fi
    }

    decode64() {
    if [[ $# -eq 0 ]]; then
        cat | base64 --decode
    else
        printf '%s' $1 | base64 --decode
    fi
    }
    alias e64=encode64
    alias d64=decode64
fi

{{ if eq .chezmoi.os "darwin" -}}
################################################################################
#################################macOS ALIASES #################################
################################################################################
################################################################################
############################apache specific aliases ############################
################################################################################
if check_cmd apachectl; then
    alias apachestart="${SUDO}apachectl start"
    alias apachestop="${SUDO}apachectl stop"
    alias apacherestart="${SUDO}apachectl restart"
fi
#################################################################################
############################command specific aliases#############################
#################################################################################
if [ -x /usr/local/bin/ssh ]; then
    alias ssh="/usr/local/bin/ssh"
fi
alias ldd="otool -L"
alias lock="pmset displaysleepnow"

{{ else if eq .chezmoi.os "freebsd" -}}
###############################################################################
################################freebsd ALIASES ###############################
###############################################################################
alias cdp="cd /usr/local/poudriere/ports/default"
alias portlint="portlint -abct"
alias p="${SUDO}pkg"
alias pac="${SUDO}pkg autoremove -y && ${SUDO} pkg clean -ay"
alias pb="${SUDO}pkg bootstrap -fy"
alias pc="${SUDO}pkg remove -fay"
alias pi="${SUDO}pkg install -y"
alias pks="pkg search"
alias pu="${SUDO}pkg update"
alias pU="${SUDO}pkg upgrade"
alias puU="pu && puU"
alias pv="pkg version"
{{ else if eq .chezmoi.os "linux" -}}
{{ if hasKey .chezmoi.osRelease "id" }}
{{ if eq .chezmoi.osRelease.id "arch" -}}
###############################################################################
###############################archlinux ALIASES ##############################
###############################################################################
#######################################
#              Pacman               #
#######################################
alias p="${SUDO}pacman"                                 # Pacman
alias pac="${SUDO}pacman -Rs $(pacman -Qtdq)"           # Delete all orphaned packages
alias pc="${SUDO}pacman -Rns"                           # Remove packages, including its settings and dependencies
alias pi="${SUDO}pacman -S"                             # Install packages from the repositories
alias pks="pacman -Ss"                                  # Search for packages in the repositories
alias pu="${SUDO}pacman -Syyu"                          # Sync with repositories before upgrading packages
alias pU="${SUDO}pacman -Fy"                            # Download fresh package databases from the server
alias puU="pu && puU"
# alias pacins="${SUDO}pacman -U"                       # Install a package from a local file
# alias pacre="${SUDO}pacman -R"                        # Remove packages, keeping its settings and dependencies
# alias pacrep="pacman -Si"                             # Display information about a package in the repositories
# alias pacloc="pacman -Qi"                             # Display information about a package in the local database
# alias paclocs="pacman -Qs"                            # Search for packages in the local database
# alias pacinsd="${SUDO}pacman -S --asdeps"             # Install packages as dependencies of another package
# alias pacmir="${SUDO}pacman -Syy"                     # Force refresh of all package lists after updating mirrorlist
# alias paclsorphans="${SUDO}pacman -Qdt"               # List all orphaned packages
# alias pacfiles="pacman -F"                            # Search package file names for matching strings
# alias pacls="pacman -Ql"                              # List files in a package
# alias pacown="pacman -Qo"                             # Show which package owns a file
# alias pacupd="${SUDO}pacman -Sy"                      # Update and refresh local package, ABS and AUR databases

# List all explicitly installed packages with a description
paclist() {
    pacman -Qqe | \
        xargs -I "{}" \
        expac "${bold_color}% 20n ${fg_no_bold[white]}%d${reset_color}" "{}"
}

# List all disowned files in your system
pacdisowned() {
    local tmp db fs
    tmp=${TMPDIR-/tmp}/pacman-disowned-$UID-$$
    db=$tmp/db
    fs=$tmp/fs

    mkdir "$tmp"
    trap "rm -rf "$tmp"" EXIT

    pacman -Qlq | sort -u > "$db"

    find /bin /etc /lib /sbin /usr ! -name lost+found \
       \( -type d -printf "%p/\n" -o -print \) | sort > "$fs"

    comm -23 "$fs" "$db"
}

# Get all keys for developers and trusted users
alias pacmanallkeys="${SUDO}pacman-key --refresh-keys"

# Locally trust all keys passed as parameters
pacmansignkeys() {
    local key
    for key in $@; do
        ${SUDO}pacman-key --recv-keys $key
        ${SUDO}pacman-key --lsign-key $key
        printf "trust\n3\n" | sudo gpg --homedir /etc/pacman.d/gnupg \
            --no-permission-warning --command-fd 0 --edit-key $key
    done
}

if check_cmd xdg-open; then
# Open the website of an ArchLinux package
pacweb() {
    if [[ $# = 0 || "$1" =~ "--help|-h" ]]; then
        local underline_color="\e[${color[underline]}m"
        echo "$0 - open the website of an ArchLinux package"
        echo
        echo "Usage:"
        echo "    $bold_color$0$reset_color ${underline_color}target${reset_color}"
        return 1
    fi

    local pkg="$1"
    local infos="$(LANG=C pacman -Si "$pkg")"
    if [[ -z "$infos" ]]; then
        return
    fi
    local repo="$(grep -m 1 "^Repo" <<< "$infos" | grep -oP "[^ ]+$")"
    local arch="$(grep -m 1 "^Arch" <<< "$infos" | grep -oP "[^ ]+$")"
    xdg-open "https://www.archlinux.org/packages/$repo/$arch/$pkg/" &>/dev/null
}
fi
{{ else if eq .chezmoi.osRelease.id "centos" -}}
################################################################################
################################centos ALIASES #################################
################################################################################
################################################################################
########################### yum specific aliases ###############################
################################################################################
#        alias yc="${SUDO}yum clean all"               # Cleans the cache.
#        alias yh="yum history"                        # Displays history.
#        alias yi="${SUDO}yum install"                 # Installs package(s).
#        alias ygl="yum grouplist"                     # list package groups
#        alias yl="yum list"                           # Lists packages.
#        alias yli="yum list installed"                # Lists installed packages.
#        alias yp="yum info"                           # Displays package information.
#        alias yr="${SUDO}yum remove"                  # Removes package(s).
#        alias ys="yum search"                         # Searches for a package.
#        alias yu="${SUDO}yum update"                  # Updates packages.
#        alias yU="${SUDO}yum upgrade"                 # Upgrades packages.
#        alias ymc="${SUDO}yum makecache"              # rebuilds the yum package list
#        alias ygi="${SUDO}yum groupinstall"           # install package group
#        alias ygr="${SUDO}yum groupremove"            # remove pagage group
#        alias yrl="${SUDO}yum remove --remove-leaves" # remove package and leaves

{{ else if eq .chezmoi.osRelease.id "debian" -}}
###############################################################################
#################################debian ALIASES################################
###############################################################################
###############################################################################
########################## apt specific aliases ###############################
###############################################################################
#        if [[ -z $APT || -z $APT_UPGR ]]; then
#          if [[ -e $commands[apt] ]]; then
#            APT='apt'
#            APT_UPGR='upgrade'
#          elif [[ -e $commands[aptitude] ]]; then
#            APT='aptitude'
#            APT_UPGR='safe-upgrade'
#            alias api='aptitude'              # Same functionality as `apt-get`, provides extra options
#            alias aps='aptitude search'       # Searches installed packages using aptitude
#            alias as="aptitude -F '* %p -> %d \n(%v/%V)' --no-gui --disable-columns search"
#                                              # Print searched packages using a custom format
#            alias kclean="$SUDOaptitude remove -P ?and(~i~nlinux-(ima|hea) ?not(~n`uname -r`))"
#                                              # Remove ALL kernel images and headers EXCEPT the one in use
#            alias allpkgs='aptitude search -F "%p" --disable-columns ~i'
#                                              # print all installed packages
#            alias kclean="$SUDOaptitude remove -P ?and(~i~nlinux-(ima|hea) ?not(~n`uname -r`))"
#                                              # Remove ALL kernel images and headers EXCEPT the one in use
#          else
#            APT='apt-get'
#            APT_UPGR='upgrade'
#          fi
#        fi
#
#        alias age="$SUDO$APT"             # Run apt-get with $SUDO
#        alias acs='apt-cache search'      # Search the apt-cache with the specified criteria
#        alias afs='apt-file search --regexp'
#                                            # Perform a regular expression apt-file search
#        alias ags='apt-get source'        # Fetch the source for the specified package
#        alias acp='apt-cache policy'      # Display the package source priorities
#        alias aga="$SUDO$APT autoclean"
#                                          # Clears out the local reposityory of retrieved package files that can no longer be downloaded
#        alias agb="$SUDO$APT build-dep"   # Installs/Removes packages to satisfy the dependencies of a specified build pkg
#        alias agc="$SUDO$APT clean"       # Clears out the local repository of retrieved package files leaving everything from the lock files
#        alias agd="$SUDOapt-get dselect-upgrade"
#                                          # Follows dselect choices for package installation
#        alias agi="$SUDO$APT install"     # Install the specified package
#        alias agp="$SUDO$APT purge"       # Remove a package including any configuration files
#        alias agr="$SUDO$APT remove"      # Remove a package
#        alias agu="$SUDO$APT update"      # Update package list
#        alias agud="$SUDO$APT update && $SUDO$APT dist-upgrade"
#                                          # Update packages list and perform a distribution upgrade
#        alias agug="$SUDO$APT $APT_UPGR"  # Upgrade available packages
#        alias aguu="$SUDO$APT update && $SUDO$APT $APT_UPGR"
#                                          # Update packages list and upgrade available packages
#        alias afu="$SUDOapt-file update"  # Update the files in packages
#        alias ail="sed -e 's/  */ /g' -e 's/ *//' | cut -s -d ' ' -f 1 | xargs $SUDO$APT install"
#                                          # Install all packages given on the command line while using only the first word of each line

# Install all .deb files in the current directory.
# Warning: you will need to put the glob in single quotes if you use:
# glob_subst
#        alias dia="$SUDOdpkg -i ./*.deb"
#        alias di="$SUDOdpkg -i"           # Install all .deb files in the current directory
#
#        alias mydeb='time dpkg-buildpackage -rfakeroot -us -uc'
#                                          # Create a basic .deb package

### Completion
#
# Registers a compdef for $1 that calls $APT with the commands $2
# To do that it creates a new completion function called _APT_$2
#
#        function apt_pref_compdef() {
#          local f fb
#          f="_APT_${2}"
#
#          eval "function ${f}() {
#            shift words;
#            service=\"\$APT\";
#            words=(\"\$APT\" '$2' \$words);
#            ((CURRENT++))
#            test \"\${APT}\" = 'aptitude' && _aptitude || _apt
#          }"
#
#          compdef "$f" "$1"
#        }
#
#        apt_pref_compdef aac "autoclean"
#        apt_pref_compdef abd "build-dep"
#        apt_pref_compdef ac  "clean"
#        apt_pref_compdef ad  "update"
#        apt_pref_compdef afu "update"
#        apt_pref_compdef au  "$APT_UPGR"
#        apt_pref_compdef ai  "install"
#        apt_pref_compdef ail "install"
#        apt_pref_compdef ap  "purge"
#        apt_pref_compdef ar  "remove"
#        apt_pref_compdef ads "dselect-upgrade"

### Functions
# create a simple script that can be used to 'duplicate' a system
#        function apt-copy() {
#          print '#!/bin/sh'"\n" > apt-copy.sh
#
#          cmd='$APT install'
#
#          for p in ${(f)"$(aptitude search -F "%p" --disable-columns \~i)"}; {
#            cmd="${cmd} ${p}"
#          }
#
#          print $cmd "\n" >> apt-copy.sh
#
#          chmod +x apt-copy.sh
#        }

# Prints apt history
# Usage:
#   apt-history install
#   apt-history upgrade
#   apt-history remove
#   apt-history rollback
#   apt-history list
# Prints the Apt history of the specified action
#        function apt-history() {
#          case "$1" in
#            install)
#              zgrep --no-filename 'install ' $(ls -rt /var/log/dpkg*)
#              ;;
#            upgrade|remove)
#              zgrep --no-filename $1 $(ls -rt /var/log/dpkg*)
#              ;;
#            rollback)
#              zgrep --no-filename upgrade $(ls -rt /var/log/dpkg*) | \
#                grep "$2" -A10000000 | \
#                grep "$3" -B10000000 | \
#                awk '{print $4"="$5}'
#              ;;
#            list)
#              zgrep --no-filename '' $(ls -rt /var/log/dpkg*)
#              ;;
#            *)
#              echo "Parameters:"
#              echo " install - Lists all packages that have been installed."
#              echo " upgrade - Lists all packages that have been upgraded."
#              echo " remove - Lists all packages that have been removed."
#              echo " rollback - Lists rollback information."
#              echo " list - Lists all contains of dpkg logs."
#              ;;
#          esac
#        }
#
# Kernel-package building shortcut
#        function kerndeb() {
#          # temporarily unset MAKEFLAGS ( '-j3' will fail )
#          MAKEFLAGS=$( print - $MAKEFLAGS | perl -pe 's/-j\s*[\d]+//g' )
#          print '$MAKEFLAGS set to '"'$MAKEFLAGS'"
#          appendage='-custom' # this shows up in $(uname -r)
#          revision=$(date +"%Y%m%d") # this shows up in the .deb file name

#          make-kpkg clean

#          time fakeroot make-kpkg --append-to-version "$appendage" --revision \
#            "$revision" kernel_image kernel_headers
#        }

# List packages by size
#        function apt-list-packages() {
#          dpkg-query -W --showformat='${Installed-Size} ${Package} ${Status}\n' | \
#          grep -v deinstall | \
#          sort -n | \
#          awk '{print $1" "$2}'
#        }

{{ else if eq .chezmoi.osRelease.id "fedora" -}}
###############################################################################
#################################fedora ALIASES################################
###############################################################################
###############################################################################
########################## dnf specific aliases ###############################
###############################################################################
#        alias dnfc="${SUDO}dnf clean all"             # Cleans the cache.
#        alias dnfh="dnf history"                      # Displays history.
#        alias dnfi="${SUDO}dnf install"               # Installs package(s).
#        alias dnfl="dnf list"                         # Lists packages.
#        alias dnfL="dnf list installed"               # Lists installed packages.
#        alias dnfp="dnf info"                         # Displays package information.
#        alias dnfr="${SUDO}dnf remove"                # Removes package(s).
#        alias dnfs="dnf search"                       # Searches for a package.
#        alias dnfu="${SUDO}dnf update"                # Updates packages.
#        alias dnfU="${SUDO}dnf upgrade"               # Upgrades packages.
#        alias dnfgl="dnf grouplist"                   # List package groups
#        alias dnfmc="dnf makecache"                   # Generate metadata cache
#        alias dnfgi="${SUDO}dnf groupinstall"         # Install package group
#        alias dnfgr="${SUDO}dnf groupremove"          # Remove package group

{{ else if eq .chezmoi.osRelease.id "opensuse" -}}
##############################################################################
###############################opensuse ALIASES###############################
##############################################################################
##############################################################################
########################## zypper specific aliases ###########################
##############################################################################
#Main commands
#        alias zy="$SUDOzypper"                # call zypper
#        alias zh="zypper -h"                  # print help
#        alias zhse="zypper -h se"             # print help for the search command
#        alias zlicenses="zypper licenses"     # prints a report about licenses and EULAs of installed packages
#        alias zps="$SUDOzypper ps"            # list process using deleted files
#        alias zshell="$SUDOzypper shell"      # open a zypper shell session
#        alias zsource-download="$SUDOzypper source-download"
#                                                # download source rpms for all installed packages
#        alias ztos="zypper tos"               # shows the ID string of the target operating system
#        alias zvcmp="zypper vcmp"             # tell whether version1 is older or newer than version2

#Packages commands
#        alias zin="$SUDOzypper in"            # install packages
#        alias zinr="$SUDOzypper inr"          # install newly added packages recommended by already installed ones
#        alias zrm="$SUDOzypper rm"            # remove packages
#        alias zsi="$SUDOzypper si"            # install source of a package
#        alias zve="$SUDOzypper ve"            # verify dependencies of installed packages

#Updates commands
#        alias zdup="$SUDOzypper dup"          # upgrade packages
#        alias zlp="zypper lp"                 # list necessary patches
#        alias zlu="zypper lu"                 # list updates
#        alias zpchk="$SUDOzypper pchk"        # check for patches
#        alias zup="$SUDOzypper up"            # update packages
#        alias zpatch="$SUDOzypper patch"      # install patches

#Request commands
#        alias zif="zypper if"                     # display info about packages
#        alias zpa="zypper pa"                     # list packages
#        alias zpatch-info="zypper patch-info"     # display info about patches
#        alias zpattern-info="zypper pattern-info" # display info about patterns
#        alias zproduct-info="zypper product-info" # display info about products
#        alias zpch="zypper pch"                   # list all patches
#        alias zpd="zypper pd"                     # list products
#        alias zpt="zypper pt"                     # list patterns
#        alias zse="zypper se"                     # search for packages
#        alias zwp="zypper wp"                     # list all packages providing the specified capability

#Repositories commands
#        alias zar="$SUDOzypper ar"        # add a repository
#        alias zcl="$SUDOzypper clean"     # clean cache
#        alias zlr="zypper lr"             # list repositories
#        alias zmr="$SUDOzypper mr"        # modify repositories
#        alias znr="$SUDOzypper nr"        # rename repositories (for the alias only)
#        alias zref="$SUDOzypper ref"      # refresh repositories
#        alias zrr="$SUDOzypper rr"        # remove repositories

#Services commands
#        alias zas="$SUDOzypper as"        # adds a service specified by URI to the system
#        alias zms="$SUDOzypper ms"        # modify properties of specified services
#        alias zrefs="$SUDOzypper refs"    # refreshing a service mean executing the service"s special task
#        alias zrs="$SUDOzypper rs"        # remove specified repository index service from the system
#        alias zls="zypper ls"             # list services defined on the system

#Package Locks Management commands
#        alias zal="$SUDOzypper al"        # add a package lock
#        alias zcl="$SUDOzypper cl"        # remove unused locks
#        alias zll="zypper ll"             # list currently active package locks
#        alias zrl="$SUDOzypper rl"        # remove specified package lock

{{ else if eq .chezmoi.osRelease.id "ubuntu" -}}
################################################################################
###############################ubuntu ALIASES###################################
################################################################################
################################################################################
########################### apt specific aliases ###############################
################################################################################
# Aliases
# Commands that use `$APT` will use `apt` if installed or defer to `apt-get` otherwise.
#        (( $+commands[apt] )) && APT=apt || APT=apt-get

# Search the apt-cache with the specified criteria
#        alias acs='apt-cache search'

# Perform a regular expression apt-file search
#        alias afs='apt-file search --regexp'

# Fetch the source for the specified package
#        alias ags="$APT source"

# Display the package source priorities
#        alias acp='apt-cache policy'

#List all installed packages
#        alias agli='apt list --installed'

# List available updates only
#        alias aglu='apt list --upgradable'

# Generates or updates the apt-file package database
#        alias afu="$SUDOapt-file update"

# Remove the specified PPA
#        alias ppap="$SUDOppa-purge"

# Run apt-get with $SUDO
#        alias age="$SUDO$APT"
# Clears out the local reposityory of retrieved package files that can no longer be downloaded
#        alias aga="$SUDO$APT autoclean"
# Installs/Removes packages to satisfy the dependencies of a specified build pkg
#        alias agb="$SUDO$APT build-dep"
# Clears out the local repository of retrieved package files leaving everything from the lock files
#        alias agc="$SUDO$APT clean"
# Follows dselect choices for package installation
#        alias agd="$SUDO$APT dselect-upgrade"
# Install the specified package
#        alias agi="$SUDO$APT install"
# Remove a package including any configuration files
#        alias agp="$SUDO$APT purge"
# Remove a package
#        alias agr="$SUDO$APT remove"
# Update package list
#        alias agu="$SUDO$APT update"
# Update packages list and perform a distribution upgrade
#        alias agud="$SUDO$APT update && $SUDO$APT dist-upgrade"
# Upgrade available packages
#        alias agug="$SUDO$APT upgrade"
# Update packages list and upgrade available packages
#        alias aguu="$SUDO$APT update && $SUDO$APT upgrade"
# Remove automatically installed packages no longer needed
#        alias agar="$SUDO$APT autoremove"

# print all installed packages
#        alias allpkgs='dpkg --get-selections | grep -v deinstall'

# Create a basic .deb package
#        alias mydeb='time dpkg-buildpackage -rfakeroot -us -uc'

### Functions
# apt-add-repository with automatic install/upgrade of the desired package
# Usage: aar ppa:xxxxxx/xxxxxx [packagename]
# If packagename is not given as 2nd argument the function will ask for it and guess the default by taking
# the part after the / from the ppa name which is sometimes the right name for the package you want to install
#        function aar() {
#          if [ -n "$2" ]; then
#            PACKAGE=$2
#          else
#            read "PACKAGE?Type in the package name to install/upgrade with this ppa [${1##*/}]: "
#          fi
#
#          if [ -z "$PACKAGE" ]; then
#            PACKAGE=${1##*/}
#          fi

#          $SUDOapt-add-repository $1 && $SUDO$APT update
#          $SUDO$APT install $PACKAGE
#        }

# Prints apt history
# Usage:
#   apt-history install
#   apt-history upgrade
#   apt-history remove
#   apt-history rollback
#   apt-history list
# Prints the Apt history of the specified action
#        function apt-history() {
#          case "$1" in
#            install)
#              zgrep --no-filename 'install ' $(ls -rt /var/log/dpkg*)
#              ;;
#            upgrade|remove)
#              zgrep --no-filename $1 $(ls -rt /var/log/dpkg*)
#              ;;
#            rollback)
#              zgrep --no-filename upgrade $(ls -rt /var/log/dpkg*) | \
#                grep "$2" -A10000000 | \
#                grep "$3" -B10000000 | \
#                awk '{print $4"="$5}'
#              ;;
#            list)
#              zgrep --no-filename '' $(ls -rt /var/log/dpkg*)
#              ;;
#            *)
#              echo "Parameters:"
#              echo " install - Lists all packages that have been installed."
#              echo " upgrade - Lists all packages that have been upgraded."
#              echo " remove - Lists all packages that have been removed."
#              echo " rollback - Lists rollback information."
#              echo " list - Lists all contains of dpkg logs."
#              ;;
#          esac
#        }

# Kernel-package building shortcut
#        function kerndeb() {
#          # temporarily unset MAKEFLAGS ( '-j3' will fail )
#          MAKEFLAGS=$( print - $MAKEFLAGS | perl -pe 's/-j\s*[\d]+//g' )
#          print '$MAKEFLAGS set to '"'$MAKEFLAGS'"
#          appendage='-custom' # this shows up in $(uname -r)
#          revision=$(date +"%Y%m%d") # this shows up in the .deb file name
#
#          make-kpkg clean
#
#          time fakeroot make-kpkg --append-to-version "$appendage" --revision \
#            "$revision" kernel_image kernel_headers
#        }

# List packages by size
#        function apt-list-packages() {
#          dpkg-query -W --showformat='${Installed-Size} ${Package} ${Status}\n' | \
#          grep -v deinstall | \
#          sort -n | \
#          awk '{print $1" "$2}'
#        }
{{ end }}
{{ end }}
{{ end }}
case ${SHELL##*/} in
    zsh|bash)
        alias h="history 25"
        alias reload="clear ; exec zsh"
        ;;
    sh)
        alias h="fc -l"
        alias reload="clear ; source ~/.shrc"
        ;;
esac

# vim: ft=sh:
## Add an "alert" alias for long running commands.  Use like so:
##   sleep 10; alert
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
#alias d='dirs -v | head -10'
## List directory contents
#alias lsa='ls -lah'
#alias la='ls -A'
#alias l='ls -CF'
#alias perm='stat --printf "%a %n \n "'      # perm: Show permission of target in number
#alias 000='chmod 000'                       # ---------- (nobody)
#alias 640='chmod 640'                       # -rw-r----- (user: rw, group: r, other: -)
#alias 644='chmod 644'                       # -rw-r--r-- (user: rw, group: r, other: -)
#alias 755='chmod 755'                       # -rwxr-xr-x (user: rwx, group: rx, other: x)
#alias 775='chmod 775'                       # -rwxrwxr-x (user: rwx, group: rwx, other: rx)
#alias mx='chmod a+x'                        # ---x--x--x (user: --x, group: --x, other: --x)
#alias ux='chmod u+x'                        # ---x------ (user: --x, group: -, other: -)
## Directory Listing aliases
#alias dir='ls -hFx'
#alias l.='ls -d .* --color=tty' # short listing, only hidden files - .*
#alias l='ls -lathF'             # long, sort by newest to oldest
#alias L='ls -latrhF'            # long, sort by oldest to newest
#alias la='ls -Al'               # show hidden files
#alias lc='ls -lcr'              # sort by change time
#alias lk='ls -lSr'              # sort by size
#alias lh='ls -lSrh'             # sort by size human readable
#alias lm='ls -al | more'        # pipe through 'more'
#alias lo='ls -laSFh'            # sort by size largest to smallest
#alias lr='ls -lR'               # recursive ls
#alias lt='ls -ltr'              # sort by date
#alias lu='ls -lur'              # sort by access time
#alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less' #   lr:  Full Recursive Directory Listing
#alias dud='du -d 1 -h'                      # Short and human-readable file listing
#alias duf='du -sh *'                        # Short and human-readable directory listing
##   -------------------------------
##   1.  FILE AND FOLDER MANAGEMENT
##   -------------------------------
#alias numFiles='echo $(ls -1 | wc -l)'       # numFiles:     Count of non-hidden files in current dir
#alias make1mb='truncate -s 1m ./1MB.dat'     # make1mb:      Creates a file of 1mb size (all zeros)
#alias make5mb='truncate -s 5m ./5MB.dat'     # make5mb:      Creates a file of 5mb size (all zeros)
#alias make10mb='truncate -s 10m ./10MB.dat'  # make10mb:     Creates a file of 10mb size (all zeros)
##   ---------------------------
##   2.  SEARCHING
##   ---------------------------
#alias qfind="find . -name "                 # qfind:    Quickly search for file
##   ---------------------------
##   3.  PROCESS MANAGEMENT
##   ---------------------------
##   memHogsTop, memHogsPs:  Find memory hogs
##   -----------------------------------------------------
#alias memHogsTop='top -l 1 -o rsize | head -20'
#alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
##   cpuHogs:  Find CPU hogs
##   -----------------------------------------------------
#alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'
##   topForever:  Continual 'top' listing (every 10 seconds)
##   -----------------------------------------------------
#alias topForever='top -l 9999999 -s 10 -o cpu'
##   ttop:  Recommended 'top' invocation to minimize resources
##   ------------------------------------------------------------
#alias ttop="top -R -F -s 10 -o rsize"
##   ---------------------------
##   4.  NETWORKING
##   ---------------------------
#
#alias netCons='lsof -i'                                   # netCons:      Show all open TCP/IP sockets
#alias lsock='sudo /usr/sbin/lsof -i -P'                   # lsock:        Display open sockets
#alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'         # lsockU:       Display only open UDP sockets
#alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'         # lsockT:       Display only open TCP sockets
#alias openPorts='sudo lsof -i | grep LISTEN'              # openPorts:    All listening connections
#alias showBlocked='sudo ipfw list'                        # showBlocked:  All ipfw rules inc/ blocked IPs
##   ---------------------------------------
##   5.  SYSTEMS OPERATIONS & INFORMATION
##   ---------------------------------------
#alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user
##   ---------------------------------------
##   6.  DATE & TIME MANAGEMENT
##   ---------------------------------------
#alias bdate="date '+%a, %b %d %Y %T %Z'"
#alias cal3='cal -3'
#alias da='date "+%Y-%m-%d %A    %T %Z"'
#alias daysleft='echo "There are $(($(date +%j -d"Dec 31, $(date +%Y)")-$(date +%j))) left in year $(date +%Y)."'
#alias epochtime='date +%s'
#alias mytime='date +%H:%M:%S'
#alias secconvert='date -d@1234567890'
#alias stamp='date "+%Y%m%d%a%H%M"'
#alias timestamp='date "+%Y%m%dT%H%M%S"'
#alias today='date +"%A, %B %-d, %Y"'
#alias weeknum='date +%V'
##   -----------------------------
##   9.  MAKE TERMINAL BETTER
##   -----------------------------
#alias less='less -FSRXc'                    # Preferred 'less' implementation
#alias nano='nano -W'                        # Preferred 'nano' implementation
#alias wget='wget -c'                        # Preferred 'wget' implementation (resume download)
#alias c='clear'                             # c:            Clear terminal display
#alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
#alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
#alias fix_term='echo -e "\033c"'            # fix_term:     Reset the conosle.  Similar to the reset command
##   -----------------------------
##   10.  bash specific
##   -----------------------------
#alias show_options='shopt'                  # Show_options: display bash options settings
#alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
#alias src='source ~/.bashrc'                # src:          Reload .bashrc file
#alias bashconfig="vi ~/.bashrc"
#
## vi: ft=sh
