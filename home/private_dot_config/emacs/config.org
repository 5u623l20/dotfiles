#+TITLE: BOFH's GNU Emacs Config
#+AUTHOR: BOFH
#+DESCRIPTION: BOFH's personal Emacs config.
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Documents/Org/html/config.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{}

* TABLE OF CONTENTS                                                     :TOC:

* IMPORTANT! PUT THIS IN init.el
This configuration file is a literate config written in org mode so that I have
the comments properly documented and the init.el file is clean from
garbages. The following code block in init.el tells to use the source code
blocks from this file (config.org).

#+begin_example
(org-babel-load-file
 (expand-file-name
  "config.org"
  user-emacs-directory))
#+end_example

* PROGRAMS TO LOAD FIRST
The order in which the various Emacs modules load is very important. So the
very first code block is going to contain essential modules that many other
modules will depend on later in this config.

** Setup Package.el To Work With MELPA
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("melpa" . 5)
        ("gnu" . 0)))
(unless package-archive-contents
  (package-refresh-contents))
(package-initialize)
#+end_src

** Use-Package
Install use-package and enable ':ensure t' globally. The ':ensure' keyword
causes the package(s) within use-package statements to be installed
automatically if not already present on system. To avoid having to add ':ensure
t' to every use-package statement in this config set
'use-package-always-ensure'.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t)
#+end_src

** Fortune Cookies
Set bofh excuse fortunes

#+begin_src emacs-lisp
  (require 'fortune)
  (setq fortune-dir "~/.local/share/fortunes")
  (setq fortune-file "~/.local/share/fortunes/bofh")
#+end_src

* STARTUP PERFORMANCE
  This section is where it make emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

** RUNTIME PERFORMANCE
Dial the GC threshold back down so that garbage collection happens more
frequently but in less time.
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Sane Defaults
Some of my saner defaults for Emacs.

#+begin_src emacs-lisp
(setq auto-revert-interval 1            ; Refresh buffers fast
      default-input-method "TeX"        ; Use TeX when toggling input method
      echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 100       ; Show more recent files
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      make-backup-files nil             ; stop creating those backup~ files
      auto-save-default nil             ; stop creating those #autosave# files
      )
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
  (setq mac-pass-command-to-system nil))
#+end_src

** Set default language ENV to UTF-8
Set =utf-8= as preferred coding system.

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
#+end_src

** Defaults for line-wrapping and TAB handling
Some variables are buffer-local, so changing them using setq will only change
them in a single buffer. Using setq-default we change the buffer-local
variable’s default value.

#+begin_src emacs-lisp
(setq-default tab-width 4                       ; Smaller tabs
              fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              frame-resize-pixelwise t          ; Fine-grained frame resize
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

** Turn of Audible Bell
Turn of the audible bell

#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** Answer question with characters
Answering yes and no to each question from Emacs can be tedious, a single y or
n will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Enable =narrow-to-region=
By default the narrow-to-region command is disabled and issues a warning,
because it might confuse new users. I find it useful sometimes, and don’t want
to be warned.

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

** Revert =doc-view= buffers
Automaticly revert =doc-view-buffers= when the file changes on disk.

#+begin_src emacs-lisp
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+end_src

* MacOS Specific Configurations

** ADD PATH to Emacs
Set up Emacs' `exec-path' and PATH environment variable to match that
used by the user's shell. This is particularly useful under Mac OS X
and macOS, where GUI apps are not started from a shell." This is to
include environment-variables from the shell. It makes using Emacs
along with external processes a lot simpler.

#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize))
;; (defun set-exec-path-from-shell-PATH ()
;;   (interactive)
;;   (let ((path-from-shell (replace-regexp-in-string
;; 			  "[ \t\n]*$" "" (shell-command-to-string
;; 					  "$SHELL --login -c 'echo $PATH'"
;; 						    ))))
;;     (setenv "PATH" path-from-shell)
;;     (setq exec-path (split-string path-from-shell path-separator))))
;; (set-exec-path-from-shell-PATH)
#+end_src

** Some more sane defaults in MacOS

#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
  (setq ns-pop-up-frames nil
        mac-option-modifier nil
        x-select-enable-clipboard t)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))
#+end_src

** Open files in MacOS finder

#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell))
#+end_src

* Keep EMACS Config directory clean

** Keep customization settings in a temporary file
#+begin_src emacs-lisp
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src
