#+TITLE: BOFH's GNU Emacs Config
#+AUTHOR: BOFH
#+DESCRIPTION: BOFH's personal Emacs config.
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Documents/Org/html/config.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{}

* TABLE OF CONTENTS                                                     :TOC:

* IMPORTANT! PUT THIS IN init.el
This configuration file is a literate config written in org mode so that I have
the comments properly documented and the init.el file is clean from
garbages. The following code block in init.el tells to use the source code
blocks from this file (config.org).

#+begin_example
(org-babel-load-file
 (expand-file-name
  "config.org"
  user-emacs-directory))
#+end_example

* A FEW PROGRAMS TO LOAD FIRST
The order in which the various Emacs modules load is very important. So the
very first code block is going to contain essential modules that many other
modules will depend on later in this config.

** Setup Package.el To Work With MELPA
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("melpa" . 5)
        ("gnu" . 0)))
(unless package-archive-contents
  (package-refresh-contents))
(package-initialize)
#+end_src

** Use-Package
Install use-package and enable ':ensure t' globally. The ':ensure' keyword
causes the package(s) within use-package statements to be installed
automatically if not already present on system. To avoid having to add ':ensure
t' to every use-package statement in this config set
'use-package-always-ensure'.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t)
#+end_src

** Fortune Cookies
Set bofh excuse fortunes

#+begin_src emacs-lisp
  (require 'fortune)
  (setq fortune-dir "~/.local/share/fortunes")
  (setq fortune-file "~/.local/share/fortunes/bofh")
#+end_src

* STARTUP PERFORMANCE
  This section is where it make emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src
