#+TITLE: BOFH's GNU Emacs Config
#+AUTHOR: BOFH
#+DESCRIPTION: BOFH's personal Emacs config.
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Documents/Org/html/config.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{}

* TABLE OF CONTENTS                                                     :TOC:
- [[#important-put-this-in-initel][IMPORTANT! PUT THIS IN init.el]]
- [[#programs-to-load-first][PROGRAMS TO LOAD FIRST]]
  - [[#setup-packageel-to-work-with-melpa][Setup Package.el To Work With MELPA]]
  - [[#use-package][Use-Package]]
  - [[#fortune-cookies][Fortune Cookies]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage collection]]
  - [[#profile-emacs-startup][Profile emacs startup]]
  - [[#native-compile][Native Compile]]
- [[#sane-defaults][Sane Defaults]]
  - [[#set-default-language-env-to-utf-8][Set default language ENV to UTF-8]]
  - [[#defaults-for-line-wrapping-and-tab-handling][Defaults for line-wrapping and TAB handling]]
  - [[#turn-off-audible-bell][Turn off Audible Bell]]
  - [[#answer-question-with-characters][Answer question with characters]]
  - [[#enable-narrow-to-region][Enable =narrow-to-region=]]
  - [[#revert-doc-view-buffers][Revert =doc-view= buffers]]
  - [[#disable-some-default-modes][Disable some default modes]]
  - [[#enable-some-default-modes][Enable some default modes]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#visual][VISUAL]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#emojis][Emojis]]
  - [[#all-the-icons][All the Icons]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
- [[#development-environment][Development Environment]]
  - [[#workspaces-with-perspective][Workspaces with Perspective]]
  - [[#projects-with-projectile][Projects with Projectile]]
  - [[#completion][Completion]]
- [[#notesjournalsagendaswriting][Notes/Journals/Agendas/Writing]]
  - [[#distraction-free-writing-with-writeroom][Distraction free writing with WriteRoom]]
  - [[#org-mode][ORG mode]]
- [[#utilities][Utilities]]
  - [[#shell-with-vterm][Shell with Vterm]]
  - [[#git-client-with-magit][Git client with magit]]
- [[#macos-specific-configurations][MacOS Specific Configurations]]
  - [[#add-path-to-emacs][ADD PATH to Emacs]]
  - [[#some-more-sane-defaults-in-macos][Some more sane defaults in MacOS]]
  - [[#open-files-in-macos-finder][Open files in MacOS finder]]
  - [[#window-behavior][Window Behavior]]
- [[#keyboard-specific-configurations][Keyboard Specific Configurations]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#which-key][Which Key]]
  - [[#custom-keybindings][Custom keybindings]]
- [[#keep-emacs-config-directory-clean][Keep EMACS Config directory clean]]
  - [[#keep-customization-settings-in-a-temporary-file][Keep customization settings in a temporary file]]
  - [[#keep-emacsd-clean][Keep .emacs.d Clean]]
  - [[#no-littering][No Littering]]

* IMPORTANT! PUT THIS IN init.el
This configuration file is a literate config written in org mode so that I have
the comments properly documented and the init.el file is clean from
garbages. The following code block in init.el tells to use the source code
blocks from this file (config.org).

#+begin_example
(org-babel-load-file
 (expand-file-name
  "config.org"
  user-emacs-directory))
#+end_example

* PROGRAMS TO LOAD FIRST
The order in which the various Emacs modules load is very important. So the
very first code block is going to contain essential modules that many other
modules will depend on later in this config.

** Setup Package.el To Work With MELPA
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("melpa" . 5)
        ("gnu" . 0)))
(unless package-archive-contents
  (package-refresh-contents))
(package-initialize)
#+end_src

** Use-Package
Install use-package and enable ':ensure t' globally. The ':ensure' keyword
causes the package(s) within use-package statements to be installed
automatically if not already present on system. To avoid having to add ':ensure
t' to every use-package statement in this config set
'use-package-always-ensure'.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t)
#+end_src

** Fortune Cookies
Set bofh excuse fortunes

#+begin_src emacs-lisp
  (require 'fortune)
  (setq fortune-dir "~/.local/share/fortunes")
  (setq fortune-file "~/.local/share/fortunes/bofh")
#+end_src

* STARTUP PERFORMANCE
  This section is where it make emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection

*** Using garbage magic hack.
#+begin_src emacs-lisp
 (use-package gcmh
   :config
   (gcmh-mode 1))
#+end_src

*** Disable GC during startup
A common optimization is to temporarily disable garbage collection during
initialization. Here, we set the ~gc-cons-threshold~ to a ridiculously large
number, and restore the default value after initialization.

#+begin_src emacs-lisp
(setq gc-cons-threshold-original gc-cons-threshold)
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'after-init-hook
               (lambda () (setq gc-cons-threshold gc-cons-threshold-original)))
#+end_src

** Profile emacs startup

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* Sane Defaults
Some of my saner defaults for Emacs.

#+begin_src emacs-lisp
(setq auto-revert-interval 1            ; Refresh buffers fast
      default-input-method "TeX"        ; Use TeX when toggling input method
      echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 100       ; Show more recent files
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      make-backup-files nil             ; stop creating those backup~ files
      auto-save-default nil             ; stop creating those #autosave# files
      )
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
  (setq mac-pass-command-to-system nil))
#+end_src

** Set default language ENV to UTF-8
Set =utf-8= as preferred coding system.

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

** Defaults for line-wrapping and TAB handling
Some variables are buffer-local, so changing them using setq will only change
them in a single buffer. Using setq-default we change the buffer-local
variable’s default value.

#+begin_src emacs-lisp
(setq-default tab-width 4                       ; Smaller tabs
              fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              frame-resize-pixelwise t          ; Fine-grained frame resize
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

** Turn off Audible Bell

#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** Answer question with characters
Answering /yes/ and /no/ to each question from Emacs can be tedious, a single
/y/ or /n/ will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Enable =narrow-to-region=
By default the narrow-to-region command is disabled and issues a warning,
because it might confuse new users. I find it useful sometimes, and don’t want
to be warned.

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

** Revert =doc-view= buffers
Automaticly revert =doc-view-buffers= when the file changes on disk.

#+begin_src emacs-lisp
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+end_src

** Disable some default modes
Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(blink-cursor-mode -1)
(if (display-graphic-p)
   (scroll-bar-mode -1)
   )
#+end_src

** Enable some default modes

#+begin_src emacs-lisp
(dolist (mode
         '(abbrev-mode                 ; E.g. sopl -> System.out.println
           column-number-mode          ; Show column number in mode line
           delete-selection-mode       ; Replace selected text
           dirtrack-mode               ; directory tracking in *shell*
           ;;global-company-mode         ; Auto-completion everywhere
           ;;global-diff-hl-mode         ; Highlight uncommitted changes
           global-so-long-mode         ; Mitigate performance for long lines
           recentf-mode                ; Recently opened files
           show-paren-mode))           ; Highlight matching parentheses
  (funcall mode 1))
#+end_src

** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(setq display-line-numbers-type 'relative)
#+end_src

* VISUAL

** Theme
Adding [[https://www.nordtheme.com/][Nord]] Colortheme.

#+begin_src emacs-lisp
(use-package nord-theme)
(setq nord-uniform-mode-lines t)
(setq nord-region-highlight "frost") ; Use `nord8` from Nord's "Frost" palette as background color.
(load-theme 'nord t)
#+end_src

** Fonts
Using FiraCode Nerd Patched Font as it has ligatures

#+begin_src emacs-lisp
(cond ((member "FiraCode Nerd Font Mono" (font-family-list))
        (set-face-attribute 'default nil
          :font "FiraCode Nerd Font Mono"
          :height 120
          :weight 'medium)
        (set-face-attribute 'fixed-pitch nil
          :font "FiraCode Nerd Font Mono"
          :height 120
          :weight 'normal)
        (set-face-attribute 'fixed-pitch-serif nil
          :font "FiraCode Nerd Font Mono"
          :height 120
          :weight 'normal)
      ))
#+end_src

*** Slant Fonts
Makes commented text and keywords italics. This is working in emacsclient but
not emacs. Your font must have an italic face available.

#+begin_src emacs-lisp
(cond ((member "VictorMono Nerd Font Mono" (font-family-list))
        (set-face-attribute 'variable-pitch nil
            :font "VictorMono Nerd Font Mono"
            :height 120
            :weight 'medium)
        (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
        (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
    ))
#+end_src

*** Adjusting Line Spacing

#+begin_src emacs-lisp
(setq-default line-spacing 0.12)
#+end_src

*** Fixing fontsize in emacsclient
Needed if using emacsclient. Otherwise, your fonts will be smaller than
expected.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-12"))
#+end_src

*** Converting keywords to symbols
Changes certain keywords to symbols, such as lamda!

#+begin_src emacs-lisp
(setq global-prettify-symbols-mode t)
#+end_src

** Emojis
Emojify is an Emacs extension to display emojis. It can display github
style emojis like 😄 or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** All the Icons
This is an icon set that can be used with dashboard, dired, ibuffer and
other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Modeline
Change Modeline To Doom’s Modeline

#+begin_src emacs-lisp
(use-package doom-modeline)
(doom-modeline-mode 1)
;; If non-nil, cause imenu to see `doom-modeline' declarations.
;; This is done by adjusting `lisp-imenu-generic-expression' to
;; include support for finding `doom-modeline-def-*' forms.
;; Must be set before loading doom-modeline.
;;(setq doom-modeline-support-imenu t)

;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
;;(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It's only respected in GUI.
;;(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It's only respected in GUI.
;;(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width' is smaller than the limit, some information won't be
;; displayed. It can be an integer or a float number. `nil' means no limit."
;;(setq doom-modeline-window-width-limit 85)

;; How to detect the project root.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
;;(setq doom-modeline-project-detection 'auto)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto => emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
;;(setq doom-modeline-buffer-file-name-style 'auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
;;(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
;;(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `all-the-icons-color-icons'.
;;(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
;;(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
;;(setq doom-modeline-buffer-modification-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
;;(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
;;(setq doom-modeline-buffer-name t)

;; Whether display the minor modes in the mode-line.
;;(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
;;(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
;; remove the modes from `doom-modeline-continuous-word-count-modes'.
;;(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
;;(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
;;(setq doom-modeline-indent-info nil)

;; If non-nil, only display one number for checker information if applicable.
;;(setq doom-modeline-checker-simple-format t)

;; The maximum number displayed for notifications.
;;(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
;;(setq doom-modeline-vcs-max-length 12)

;; Whether display the workspace name. Non-nil to display in the mode-line.
;;(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
;;(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
;;(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
;;(setq doom-modeline-persp-icon t)

;; Whether display the `lsp' state. Non-nil to display in the mode-line.
;;(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub' package.
;;(setq doom-modeline-github nil)

;; The interval of checking GitHub.
;;(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state icon.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
;;(setq doom-modeline-modal-icon t)

;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
;;(setq doom-modeline-mu4e nil)
;; also enable the start of mu4e-alert
;;(mu4e-alert-enable-mode-line-display)

;; Whether display the gnus notifications.
;;(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
;;(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
;;(setq doom-modeline-gnus-excluded-groups '("dummy.group"))

;; Whether display the IRC notifications. It requires `circe' or `erc' package.
;;(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
;;(setq doom-modeline-irc-stylize 'identity)

;; Whether display the environment version.
;;(setq doom-modeline-env-version t)
;; Or for individual languages
;;(setq doom-modeline-env-enable-python t)
;;(setq doom-modeline-env-enable-ruby t)
;;(setq doom-modeline-env-enable-perl t)
;;(setq doom-modeline-env-enable-go t)
;;(setq doom-modeline-env-enable-elixir t)
;;(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
;;(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
;;(setq doom-modeline-env-ruby-executable "ruby")
;;(setq doom-modeline-env-perl-executable "perl")
;;(setq doom-modeline-env-go-executable "go")
;;(setq doom-modeline-env-elixir-executable "iex")
;;(setq doom-modeline-env-rust-executable "rustc")

;; What to display as the version while a new one is being loaded
;;(setq doom-modeline-env-load-string "...")

;; Hooks that run before/after the modeline version string is updated
;;(setq doom-modeline-before-update-env-hook nil)
;;(setq doom-modeline-after-update-env-hook nil)
#+end_src

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent
files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "The power to serve!")
  (if (display-graphic-p)
      (setq dashboard-startup-banner "~/.config/emacs/freebsd.png")  ;; use custom image as banner
    (setq dashboard-startup-banner "~/.config/emacs/freebsd.txt")  ;; use custom image as banner
    )
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
    (bookmarks . "book"))))
  (setq dashboard-footer-messages (list (fortune-message)))
#+end_src

*** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on dashboard rather
than scratch.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Development Environment

** Workspaces with Perspective
The Perspective package provides multiple named workspaces (or “perspectives”)
in Emacs, similar to multiple desktops in window managers like. Each perspective
has its own buffer list and its own window layout. This makes it easy to work on
many separate projects without getting lost in all the buffers. Switching to a
perspective activates its window configuration, and when in a perspective, only
its buffers are available.

#+begin_src emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  :config
  (persp-mode))
#+end_src

** Projects with Projectile
Manage projects with Projectile which nicely integrates with Ivy and Counsel

#+begin_src emacs-lisp
(use-package projectile
  :bind
  (("C-c p" . projectile-command-map))
  :config
  (projectile-global-mode 1))
#+end_src

** Completion
*** minibuffer with ivy/counsel/swiper
Ivy, counsel and swiper are a generic completion mechanism for Emacs. Ivy-rich
allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :bind
    (("C-c C-r" . ivy-resume)
    ("C-x B" . ivy-switch-buffer-other-window)
    ("C-x b" . ivy-switch-buffer))
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-wrap t)
    (setq ivy-height 25)
    (setq ivy-on-del-error-function 'ignore)
    :config
    (ivy-mode))
  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
    ivy-rich-switch-buffer-align-virtual-buffer t
    ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer)
    (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :bind
    (("C-c i" . swiper-isearch)
    ("M-x"     . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("M-y"     . counsel-yank-pop)))
  (use-package counsel-projectile
    :after counsel
    :config (counsel-projectile-mode))
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+end_src

*** ivy-posframe
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its
candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for
  specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for
  specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false),
anything that is set to 'ivy-display-function-fallback' will just default to
their normal position in Doom Emacs (usually a bottom split).  However, if this
is set to 't' (true), then the fallback position will be centered in the
window.

#+begin_src emacs-lisp
(use-package ivy-posframe
  :init
  (setq ivy-posframe-display-functions-alist
    '((swiper                     . ivy-posframe-display-at-point)
      (complete-symbol            . ivy-posframe-display-at-point)
      (counsel-M-x                . ivy-display-function-fallback)
      (counsel-esh-history        . ivy-posframe-display-at-window-center)
      (counsel-describe-function  . ivy-display-function-fallback)
      (counsel-describe-variable  . ivy-display-function-fallback)
      (counsel-find-file          . ivy-display-function-fallback)
      (counsel-recentf            . ivy-display-function-fallback)
      (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
      (dmenu                      . ivy-posframe-display-at-frame-top-center)
      (nil                        . ivy-posframe-display))
    ivy-posframe-height-alist
    '((swiper . 20)
      (dmenu . 20)
      (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

*** in-buffer
* Notes/Journals/Agendas/Writing
** Distraction free writing with WriteRoom
A minor mode for Emacs that implements a distraction-free writing mode similar to the famous Writeroom editor for OS X.

#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src

** ORG mode
Org Mode is =THE= killer feature within Emacs.  But it does need some tweaking.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Documents/Org/"
      org-agenda-files '("~/Documents/Org/inbox.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-log-done 'time
;;      org-journal-dir "~/Documents/Org/journal/"
;;      org-journal-date-format "%B %d, %Y (%A) "
;;      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src

*** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Org Link Abbreviations
This allows for the use of abbreviations that will get expanded out into a
lengthy URL.

#+begin_src emacs-lisp
;; An example of how this works.
;; [[wiki:Name_of_Page][Description]]
(setq org-link-abbrev-alist
        '(("google" . "http://www.google.com/search?q=")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

*** Source Code Block Tag Expansion
Org-tempo is a package that allows for '<s' followed by TAB to expand to a
begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src

This is quite an ugly fix for allowing code markup for expressions like
=”this string”=, because the quotation marks causes problems.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
  (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist)))
#+end_src

*** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language
files.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src

*** Automatically Create Table of Contents
Toc-org helps you to have an up-to-date table of contents in org files without
exporting (useful for README files on GitHub).  Use :TOC: to create the table.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Make M-RET Not Add Blank Lines
#+begin_src emacs-lisp
(setq org-blank-before-new-entry (quote ((heading . nil)
                                         (plain-list-item . nil))))
#+end_src

*** Org Export To Manpage Format
#+begin_src emacs-lisp
(use-package ox-man
  :ensure nil)
#+end_src

* Utilities

** Shell with Vterm
Vterm is a terminal emulator within Emacs. The ‘shell-file-name’ setting sets
the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm. By
default, the shell is set to ‘fish’ but could change it to ‘bash’ or ‘zsh’ if
you prefer. Use only in Macos for now.

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (use-package vterm)
  (setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)
  (add-hook 'vterm-mode-hook (lambda () (setq evil-default-state 'emacs))))
#+end_src

** Git client with magit
A git client for Emacs.  Often cited as a killer feature for Emacs.

#+begin_src emacs-lisp
(use-package magit)
 #+end_src

* MacOS Specific Configurations

** ADD PATH to Emacs
Set up Emacs' `exec-path' and PATH environment variable to match that
used by the user's shell. This is particularly useful under Mac OS X
and macOS, where GUI apps are not started from a shell." This is to
include environment-variables from the shell. It makes using Emacs
along with external processes a lot simpler.

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize))
;; (defun set-exec-path-from-shell-PATH ()
;;   (interactive)
;;   (let ((path-from-shell (replace-regexp-in-string
;; 			  "[ \t\n]*$" "" (shell-command-to-string
;; 					  "$SHELL --login -c 'echo $PATH'"
;; 						    ))))
;;     (setenv "PATH" path-from-shell)
;;     (setq exec-path (split-string path-from-shell path-separator))))
;; (set-exec-path-from-shell-PATH)
#+end_src

** Some more sane defaults in MacOS

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (setq ns-pop-up-frames nil
        x-select-enable-clipboard t)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))
#+end_src

** Open files in MacOS finder

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (use-package reveal-in-osx-finder))
#+end_src

** Window Behavior

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)))
#+end_src
* Keyboard Specific Configurations

** Evil Mode
Evil is an extensible ‘vi’ layer for Emacs. It emulates the main features of
Vim, and provides facilities for writing custom extensions. Evil Collection is
also installed since it adds ‘evil’ bindings to parts of Emacs that the
standard Evil package does not cover, such as: calenda, help-mode and ibuffer.

#+begin_src emacs-lisp
(use-package evil
  :init (setq evil-want-C-i-jump nil)  ;; Install Evil and disable C-i to jump forward to restore TAB functionality in Org mode.
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
#+end_src

** General Keybindings
General.el allows us to set keybindings. Using SPC as the prefix key. General
makes setting keybindings (especially with SPC) much easier. All of the
keybindings we set later in the config depend on general being loaded.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+end_src

** Which Key
Which-key is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src

** Custom keybindings
*** Buffers and Bookmark related bindings
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

* Keep EMACS Config directory clean

** Keep customization settings in a temporary file
#+begin_src emacs-lisp
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

** Keep .emacs.d Clean
Change the user-emacs-directory to keep unwanted things out of ~/.config/emacs

#+begin_src emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

** No Littering
Use no-littering to automatically set common paths to the new
user-emacs-directory

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
