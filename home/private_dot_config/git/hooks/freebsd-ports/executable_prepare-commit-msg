#!/bin/sh

case "$2" in
commit|message)
	# It appears git invokes this script for interactive rebase but does
	# not remove commented lines, so just exit if we're not called with the
	# default (comment-containing) template.
	grep -E -q '^#' "$1" || exit 0
	;;
template)
	exit 0
	;;
merge)
	exit 0
	;;
esac

# Location of the changelog database
CHANGELOG_DB="$HOME/.config/git/hooks/freebsd-ports/prepare-commit-msg.d/port-changelogs.db"

EXP_DATE=$(date -I -v +30d)
OUTFILE=$(mktemp /tmp/freebsd-git-commit.XXXXXXXX)
VERSION_MESSAGE=""
CHANGELOG_URL=""
OLD_VERSION=""
NEW_VERSION=""
DIFF_OUTPUT=$(git diff --cached)
exec 3> "$OUTFILE"

if [ -z "$3" ]
then
	WHAT=$(git diff-index --name-only --cached --diff-filter=ACMR HEAD | sed -Ee 's/^([^\/]+\/[^\/]+).*/\1/' | sort -u | xargs)

	# Search for version changes in DISTVERSION or PORTVERSION
	if echo "$DIFF_OUTPUT" | grep -qE '^\+.*(DISTVERSION|PORTVERSION|GH_TAGNAME)'; then
		# Extract the old and new versions from the diff
		OLD_VERSION=$(echo "$DIFF_OUTPUT" | grep -E '^\-.*(DISTVERSION|PORTVERSION|GH_TAGNAME)' | awk '{print $2}' | tr -d '"')
		NEW_VERSION=$(echo "$DIFF_OUTPUT" | grep -E '^\+.*(DISTVERSION|PORTVERSION|GH_TAGNAME)' | awk '{print $2}' | tr -d '"')

		if [ -n "$OLD_VERSION" ] && [ -n "$NEW_VERSION" ]; then
			# Prepare the version update message
			VERSION_MESSAGE="Update version $OLD_VERSION=>$NEW_VERSION"
		fi
	fi
	if [ -f "$CHANGELOG_DB" ]; then
		# Check if a changelog URL exists for the port
		if grep -q "^$WHAT|" "$CHANGELOG_DB"; then
			RAW_CHANGELOG_URL=$(grep "^$WHAT|" "$CHANGELOG_DB" | cut -d'|' -f2)

			# Perform variable substitution for ${NEW_VERSION} if present in the URL
			if [ -n "$NEW_VERSION" ]; then
				# Perform transformations dynamically
				if echo "$RAW_CHANGELOG_URL" | grep -q '${NEW_VERSION//./-}'; then
					URL_VERSION=$(echo "$NEW_VERSION" | sed 's/\./-/g')
					CHANGELOG_URL=$(echo "$RAW_CHANGELOG_URL" | sed "s|\${NEW_VERSION//./-}|$URL_VERSION|g")
				elif echo "$RAW_CHANGELOG_URL" | grep -q '${NEW_VERSION//./}'; then
					URL_VERSION=$(echo "$NEW_VERSION" | sed 's/\.//g')
					CHANGELOG_URL=$(echo "$RAW_CHANGELOG_URL" | sed "s|\${NEW_VERSION//./}|$URL_VERSION|g")
				elif echo "$RAW_CHANGELOG_URL" | grep -q '${NEW_VERSION//./_}'; then
					URL_VERSION=$(echo "$NEW_VERSION" | sed 's/\./_/g')
					CHANGELOG_URL=$(echo "$RAW_CHANGELOG_URL" | sed "s|\${NEW_VERSION//./_}|$URL_VERSION|g")
				else
					# Replace ${NEW_VERSION} or any parameter expansion like ${NEW_VERSION%.*}
					CHANGELOG_URL=$(eval "echo \"$RAW_CHANGELOG_URL\"")
				fi
			else
				# Use the URL as is if no NEW_VERSION is available
				CHANGELOG_URL="$RAW_CHANGELOG_URL"
			fi
		fi
	fi

	case $WHAT in
		*\ *)
			# More than one port, do nothing
		;;
		*)
			# One port, prepare the commit message.
			{
				echo "$WHAT: $VERSION_MESSAGE"
				echo
				echo "# Mark DEPRECATED"
				echo
				echo "# - Depends on deprecated devel/py-qt5-pyqt"
				echo "# - Set EXPIRATION_DATE $EXP_DATE"
				echo "# - Remove stale MASTER_SITES"
				echo "# - Pet portclippy"
				echo "# - Pet portfmt"
				echo "# - Pet port{clippy|fmt}"
				echo "# - Remove CC/CPP/CXX exports"
				echo "# - Replace stale MIRROR_SITES with LOCAL as these stale SITES"
				echo "#   drastically deteriorates the portscout scanner. MAINTAINERS who are"
				echo "#   also committers please update or move the DISTFILE in your own HOME"
				echo "#   public_distfiles on next commit."
				echo
				echo "# If someone needs this port feel free to undeprecate and takeover"
				echo "# maintainership."
				echo
				if [ -n "$CHANGELOG_URL" ]; then
					echo "Changelog: $CHANGELOG_URL"
				else
					echo "# Changelog: <URL>"
				fi
				echo
			} >&3
		;;
	esac
fi

awk '1;/^#$/{exit}' "$1" >&3

cat >&3 <<EOF
# category/port: Subject goes here, max 50 cols -|
# <then a blank line>
#                                                         72 columns --|
#
# PR:		<If and which Problem Report is related.>
# Reported by:	<If someone else reported the issue.>
# Reviewed by:	<If someone else reviewed your modification.>
# Tested by:	<If someone else tested the change.>
# Approved by:	submitter is maintainer
# Approved by:	portmgr (blanket)
# Approved by:	portmgr (just-fix-it)
# Approved by:	re (blanket)
# Obtained from:	<If the change is from a third party.>
# Changes:  <Changelog or release Info>
# Fixes:	<Short hash and title line of commit fixed by this change>
# MFH:		<Ports tree branch name you plan to merge to.>
# Relnotes:	<Set to 'yes' for mention in release notes.>
# Security:	<Vulnerability reference (one per line) or description.>
# Sponsored by:	Nepustil
# Sponsored by:	The FreeBSD Foundation
# Pull Request:	<https://github.com/freebsd/freebsd-ports/pull/###>
# Differential Revision:	<https://reviews.freebsd.org/D###>
#
# "Pull Request" and "Differential Revision" require the *full* GitHub or
# Phabricator URL.
EOF

awk '/^#$/,EOF' "$1" >&3

exec 3>&-

mv "$OUTFILE" "$1"
