#!/bin/sh -e

. {{ .chezmoi.homeDir -}}/.config/shells/libs

VERSION=0.0.1
PORTSDIR=${PORTSDIR:-/usr/local/poudriere/ports/default}
INDEX=${PORTSDIR}/$(make -C ${PORTSDIR} -V INDEXFILE)

if [ -z $GIT ]; then
	echo "git(1) not found.  Please install devel/git."
	exit 66
fi

escape()
{
	# escape characters that may appear in ports' names and
	# break regular expressions
	echo "${1}" |sed -E 's/(\+|\.)/\\\1/g'
}

pkgname()
{
	make -C ${PORTSDIR}/${1} -V PKGNAME
}

# return category/port if arg is directly port's directory on the filesystem
find_catport()
{
	arg=${1}

	if [ -d "${PORTSDIR}/${arg}" ] ; then
		# arg is category/port
		echo ${arg}
	elif [ -d "${arg}" ] ; then
		# arg is the port's directory somewhere in the filesystem
		# either absolute or relative

		# get the full path
		rp=$(realpath ${arg})

		category=$(basename $(dirname ${rp}))
		port=$(basename ${rp})
		echo ${category}/${port}
	else
		echo "What do you mean by '${arg}'?" >&2
		exit 64
	fi
}

find_expired()
{
	for category in $(make -C ${PORTSDIR} -V SUBDIR); do
		for port in $(make -C ${PORTSDIR}/${category} -V SUBDIR); do
			DATE="$(make -C ${PORTSDIR}/${category}/${port} -V EXPIRATION_DATE)"
			# shellcheck disable=SC2039
			if [ -n "${DATE}" ] && [ ! "${DATE}" \> "$${TODAY}" ] ; then
				if [ "$1" = 1 ] ; then
					echo -n "${DATE} ${category}/${port}: "
					make -C ${PORTSDIR}/${category}/${port} -V DEPRECATED
				else
					echo "${category}/${port}"
				fi
			fi
		done
	done
}

# check if some ports depend on the given port
# XXX Very Little Chance (tm) for breaking INDEX exists:
# /usr/ports/INDEX may be outdated and not contain recently added dependencies
check_dep_core()
{
	catport=${1}
	alltorm=${2}
	pkgname=$(pkgname ${catport})

	rmpkgs=""
	rmcatports=""
	for torm in ${alltorm} ; do
		torm="$(echo ${torm} | sed 's/\/$//')"
		rmpkgs="${rmpkgs:+${rmpkgs}|}$(pkgname ${torm})"
		rmcatports="${rmcatports:+${rmcatports}|}${PORTSDIR}/${torm}/"
	done

	err=0

	deps=$(grep -E "${pkgname}" ${INDEX} |grep -vE "^(${rmpkgs})" || :)
	if [ -n "${deps}" ] ; then
		e_header "${catport}: some port(s) depend on ${pkgname}:"
		echo "${deps}" >&2
		err=1
	fi

	# check if some Makefiles mention the port to be deleted
	portdir_grep="^[^#].*/$(basename ${catport})([[:space:]]|@|/|$)"
	r="$(${GIT} grep '${portdir_grep}' -- '**Makefile*' 'Mk/' \
		|grep -vE "^(${rmcatports})" || :)"
	if [ -n "${r}" ] ; then
		if [ ${err} -eq 1 ] ; then
			echo >&2
		fi
		e_header "${catport}: some Makefiles mention ${portdir_grep}:"
		echo "${r}" >&2
		err=1
	fi

	return ${err}
}

check_dep()
{
	catport=${1}
	persist=${2}
	alltorm=${3}

	e_header "${catport}: checking dependencies"

	err=0

	res="$(check_dep_core ${catport} "${alltorm}" 2>&1)" || err=1

	if [ ${err} -eq 0 ] ; then
		return 0
	fi

	echo "${res}" |${PAGER:-less}

	if [ ${persist} -eq 0 ] ; then
		return 0
	fi

	echo "" >&2
	echo "you can skip ${catport} and continue with the rest or remove it anyway" >&2
	seek_confirmation "do you want to skip ${catport}?"
	if is_confirmed; then
		return 1
	else
		return 0
	fi
}

# query Bugzilla and return the result
get_PRs()
{
	catport=${1}
	synopsis=${2}

	e_header "${catport}: getting PRs having ${synopsis} in the synopsis"

	url="https://bugs.freebsd.org/bugzilla/buglist.cgi?quicksearch=${synopsis}"

	raw="$(fetch -q -T 20 -o - "${url}")"

	if [ -z "${raw}" ] ; then
		e_header "${catport}: empty result from URL: ${url}"
		exit 67
	fi

	printf "%s" "${raw}" \
	|sed -ne 's,^[[:space:]]*.a href="show_bug.cgi?id=\([0-9][0-9]*\)".\([^0-9][^<]*\).*,\1: \2,p' \
	|sort
}

# check if any PRs exist that are related to the port
check_PRs()
{
	catport=${1}
	synopsis=${2}

	PRs="$(get_PRs ${catport} "${synopsis}")" || exit

	if [ -n "${PRs}" ] ; then
		e_header "${catport}: PRs found, related to ${synopsis}:"
		printf "%s\n" "${PRs}" >&2

		echo "you can skip ${catport} and continue with the rest or remove it anyway" >&2
		seek_confirmation "Do you want to skip ${catport}"
		if is_confirmed; then
			return 1
		else
			return 0
		fi
	fi

	return 0
}

# add port's entry to ports/MOVED
edit_MOVED()
{
	catport=${1}

	DEPRECATED="$(make -C ${PORTSDIR}/${catport} -V DEPRECATED)"
	DEPRECATED=${DEPRECATED:+: ${DEPRECATED}}
	if [ -n "$(make -C ${PORTSDIR}/${catport} -V EXPIRATION_DATE)" ] ; then
		REASON="Has expired${DEPRECATED}"
	else
		REASON="Removed${DEPRECATED}"
	fi

	e_header "${catport}: adding entry to ports/MOVED"

	echo "${catport}||${TODAY}|${REASON}" >> MOVED
	${GIT} add MOVED
}

# remove port from category/Makefile
edit_Makefile()
{
	cat=${1}
	port=${2}

	e_header "${cat}/${port}: removing from ${cat}/Makefile"

	portesc=$(escape ${port})

	${SED} -e "/^[[:space:]]*SUBDIR[[:space:]]*\+=[[:space:]]*${portesc}([[:space:]]+#.*)?$/d" ${cat}/Makefile
	${GIT} add ${cat}/Makefile
}

# remove port's files
rm_port()
{
	catport=${1}

	e_header "${catport}: scheduling port removal"

	echo ${catport} >> ${GIT_RMLIST}
}

append_Template()
{
	catport=${1}

	msg=${catport}

	if [ -n "${FLAG_D}" ] ; then
		EXPIRATION_DATE=$(make -C ${PORTSDIR}/${catport} -V EXPIRATION_DATE)
		if [ -n "${EXPIRATION_DATE}" ] ; then
			msg="${EXPIRATION_DATE} ${msg}"
		fi

		DEPRECATED="$(make -C ${PORTSDIR}/${catport} -V DEPRECATED)"
		if [ -n "${DEPRECATED}" ] ; then
			msg="${msg}: ${DEPRECATED}"
		fi
	fi

	e_header "${catport}: adding entry to commit message template"

	echo "${msg}" >> ${GIT_LOG}
}

# update, ask for confirmation and make a commit
commit()
{
	${GIT} commit --file=${GIT_LOG}
	seek_confirmation "Do you want to tweak the commit message?"
	if is_confirmed; then
		${GIT} pull --ff-only --rebase 2>&1
		${GIT} commit --amend # modify final commit message
		echo "All done, check the result and push when everything is OK."
	fi
}

parser_definition() {
	setup   REST error:error plus:true help:usage abbr:true -- \
		"Usage: ${2##*/} [options...] [arguments...]" ''
	msg -- 'Remove port(s)' 'category1/port1 [ category2/port2 ... ]'
	msg -- 'Options:'
	flag    FLAG_D		-D							-- "Skip dependency checks"
	flag    FLAG_F		-F							-- "Find expired ports"
	flag    FLAG_M		-M							-- "Skip editing MOVED"
	param   DEPPORT		-d							-- "accepts -d value"
	param   SYNOPSIS	-p							-- "accepts -p value"
	flag    VERBOSE		-v	counter:true init:=0	-- "e.g. -vvv is verbose level 3"
	disp    :usage		-h	--help
	disp    VERSION		--version
}

error() {
	case $2 in
		*) usage ;; # Display default error
	esac
	return 1
}

setup_cleanups
setup_traps trap_cleanups

GIT_LOG=$(mktemp_file)
cleanup_file "$GIT_LOG"
GIT_RMLIST=$(mktemp -t GIT_RMLIST)
cleanup_file "$GIT_RMLIST"

if [ ! -r ${INDEX} ] ; then
	echo "${INDEX} not readable, exiting" >&2
	exit 66
fi

git_dir="$(${GIT} rev-parse --git-dir)"
exitcode=$?
if [ ${exitcode} -ne 0 ] ; then
	echo "not at a git boundary" >&2
	exit
else
	cd "${git_dir}/.." || exit 1
fi

#eval "$(getoptions parser_definition - "$0") exit 1"
eval "$(getoptions parser_definition parse "$0") exit 1"
parse "$@"
eval "set -- $REST"
[ $# -lt 1 ] && usage && exit 1

if [ -n "$DEPPORT" ] ; then
	catport=$(find_catport ${DEPPORT})
	check_dep ${catport} 0 ${catport}
	exit
fi

if [ -n "${SYNOPSIS}" ] ; then
	get_PRs "dummy" ${SYNOPSIS}
	exit
fi

if [ -n "$FLAG_F" ]; then
	find_expired 1
	exit
fi

if [ $# -eq 1 ] ; then
	topic="${1%/}"
	plural=""
	colon=""
else
	e_header "/!\\ Removing multiple ports at once, commit topic will be generic /!\\"
	topic="cleanup"
	plural="s"
	colon=":"
fi

echo "${topic}: Remove expired port${plural}${colon}" > ${GIT_LOG}
echo "" >> ${GIT_LOG}

for catport in $* ; do
	# convert to category/port
	catport=$(find_catport ${catport})
	cat=$(dirname ${catport})
	port=$(basename ${catport})
	# remove any trailing slashes
	catport="${cat}/${port}"
	if [ -n "${FLAG_D}" ] ; then
		pkgname=$(pkgname ${catport})

		if ! check_dep ${catport} 1 "${*}" ; then
			continue
		fi

		if ! check_PRs ${catport} ${port} ; then
			continue
		fi
	fi

	# everything seems ok, edit the files

	if [ -n "${FLAG_M}" ] ; then
		edit_MOVED ${catport}
	fi

	edit_Makefile ${cat} ${port}

	append_Template ${catport}

	rm_port ${catport}
done

if [ -s ${GIT_RMLIST} ] ; then
	${GIT} rm -r $(cat ${GIT_RMLIST})
else
	e_header "No port directories to remove"
	exit
fi

commit
