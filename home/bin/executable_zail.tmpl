#!/bin/sh

#set -x
_RELEASE=$(freebsd-version)
_VERSION=${_RELEASE%-p*}
_IP6GW=$(ifconfig bridge0 inet6 | grep inet6 | awk '{print $2}')
_TS=$(date +%Y-%m-%d_%H-%M-%S)

usage() {
    cat << EOF
zail is an helper script for jails on zfs

Usage:
  zail [args] [TARGET]

Available Commands:
  -i                    Initialize the jail environments
  -a                    Build all equivalent to -p -i
  -t [TARGET]           Test [TARGET] port for all available jails
  help or -h or --help  Print this message

EOF
    exit 1
}

initialize_jail () {
if [ ! -d /usr/jails/template/$_VERSION ]; then
    # init basic zfs mountpoints
    zfs create -p zroot/usr/jails/bases

    # create dir for version and fetch it
    mkdir -p /usr/jails/bases/$_VERSION
    fetch https://download.freebsd.org/releases/amd64/$_VERSION/base.txz -o /usr/jails/bases/$_VERSION

    # init basic sharedfs and template
    zfs create -p zroot/usr/jails/sharedfs/$_VERSION
    zfs create -p zroot/usr/jails/template/$_VERSION

    # create template by using complete base
    tar -xf /usr/jails/bases/$_VERSION/base.txz -C /usr/jails/template/$_VERSION

    # copy local /etc/resolv.conf into template
    cp /etc/resolv.conf /usr/jails/template/$_VERSION/etc/resolv.conf

    # create sharedfs dir in template - needed to be mountable
    mkdir -p /usr/jails/template/$_VERSION/sharedfs/

    # now move sharedfs content from base to sharedfs
    chflags -R noschg /usr/jails/template/$_VERSION

    cd /usr/jails/template/$_VERSION
    for mountpoints in bin lib libexec sbin sys; do
        mv /usr/jails/template/$_VERSION/$mountpoints /usr/jails/sharedfs/$_VERSION/$mountpoints
        ln -s /sharedfs/$mountpoints $mountpoints
    done

    mkdir -p /usr/jails/sharedfs/$_VERSION/usr

    cd /usr/jails/template/$_VERSION/usr
    for mountpoints in bin include lib lib32 libdata libexec sbin share; do
        mv /usr/jails/template/$_VERSION/usr/$mountpoints /usr/jails/sharedfs/$_VERSION/usr/$mountpoints
        ln -s /sharedfs/usr/$mountpoints $mountpoints
    done

    sed -i '' -e '/Components/s/kernel//g; s/# BackupKernel yes/BackupKernel no/g' /usr/jails/template/$_VERSION/etc/freebsd-update.conf
    env PAGER=cat freebsd-update -b /usr/jails/sharedfs/$_VERSION -f /usr/jails/template/$_VERSION/etc/freebsd-update.conf fetch install

    cat <<EOF >> /usr/jails/template/$_VERSION/etc/periodic.conf
#!/bin/sh
daily_show_badconfig="YES"				# scripts returning 2
# 400.status-disks
daily_status_disks_enable="NO"			# Check disk status
# 480.leapfile-ntpd
daily_ntpd_leapfile_enable="NO"			# Fetch NTP leapfile
weekly_show_badconfig="YES"				# scripts returning 2
monthly_show_badconfig="YES"			# scripts returning 2
security_show_badconfig="YES"			# scripts returning 2
# 500.ipfwdenied
security_status_ipfwdenied_enable="NO"
# 510.ipfdenied
security_status_ipfdenied_enable="NO"
# 550.ipfwlimit
security_status_ipfwlimit_enable="NO"
# 610.ipf6denied
security_status_ipf6denied_enable="NO"
EOF
    cat <<EOF >> /usr/jails/template/$_VERSION/etc/rc.conf
syslogd_flags="-ss"
sendmail_enable="NONE"
hostname="jail.bounce-commerce.de"
sshd_enable="YES"
sshd_flags="-o PermitRootLogin=without-password -o PasswordAuthentication=no"
clear_tmp_enable="YES"
defaultrouter="192.168.10.1"
ipv6_defaultrouter="$_IP6GW"
firewall_enable="YES"
firewall_type="OPEN"
EOF
    if [ -f /etc/jail.conf ]; then
        mv /etc/jail.conf /etc/jail.conf.bak.$_TS
    fi
    cat <<EOF >> /etc/jail.conf
exec.start = "/bin/sh /etc/rc";
exec.stop = "/bin/sh /etc/rc.shutdown";
exec.clean;
mount.devfs;

host.hostname = \$name;
path = "/usr/jails/\$name";
exec.consolelog = "/var/log/jail_\${name}_console.log";

exec.system_user = "root";
exec.jail_user = "root";
allow.chflags;
allow.raw_sockets;
allow.sysvipc=1;
allow.set_hostname = 1;
enforce_statfs = "2";
devfs_ruleset = 50;
mount = "/usr/jails/sharedfs/$_VERSION /usr/jails/\$name/sharedfs nullfs ro 0 0";

# Upto the above lines are self explanatory
# Enable VNET stack for the jails
vnet = "new";
# Default vnet interface. If we don't do the following line all our interfaces will look like epair1b, epai2b etc.
vnet.interface   = "jail0";
# Creating an epair interface
exec.prestart    = "ifconfig \${epair} create up";
# Adding description to the interface so that we can easily understand the interface from ifconfig output in the host
exec.prestart    += "ifconfig \${epair}a up descr \${name}-jail";
# Add the A side to the bridge
exec.prestart    += "ifconfig bridge0 addm \${epair}a";
# Rename the B side to vnet.interface. See above
exec.created     = "ifconfig \${epair}b name jail0";
# After stop remove the B side interface from the jail
exec.poststop    =  "ifconfig \${epair}b -vnet \${name}";
# Remove the A side interface from the bridge interface
exec.poststop    += "ifconfig bridge0 deletem \${epair}a";
# Give it a moment to cooldown. Actually this was a bug and was required. To be in the safe side a 2s sleep won't affect us too much.
exec.poststop    +=  "sleep 2";
# Delete the epair interface
exec.poststop    += "ifconfig \${epair}a destroy";
EOF
sysrc jail_enable="YES"
else
    e_die "Jails are already initialized"
fi
}

create_jail() {
if [ -z $1 ]; then
    e_die "You need to specify a jail name!"
fi

if [ -z $2 ]; then
    e_die "You need to specify a epair number!"
fi
# get the jailname
JAILNAME=$1
EPAIR=$2

e_info_start "Creating jail $JAILNAME"

# create zfs mountpoint for the new jail
zfs snapshot zroot/usr/jails/template/$_VERSION@deploy

zfs send zroot/usr/jails/template/$_VERSION@deploy | zfs receive zroot/usr/jails/$JAILNAME

zfs destroy -r zroot/usr/jails/template/$_VERSION@deploy

cat <<EOF >> /etc/jail.conf
$JAILNAME {
        \$epair = "epair$EPAIR";
}
EOF

e_info_end
}

main() {
    [ $# -lt 1 ] && usage

    CMD=$1
    shift

    # Handle special-case commands first.
    case "${CMD}" in
    help|-h|--help)
        usage
        ;;
    -i)
        # Intialize jail system and bootstrap jail.conf and templates
        initialize_jail
        ;;
    -u)
        # Update all jails
        e_warn "Stopping jails"
        service jail stop
        e_info_start "Backing up jails"
        zfs snapshot -r "zroot/usr/jails@freebsd-update-$_TS"
        e_info_end
        zfs snapshot -r "zroot/usr/jails@freebsd-update-$_TS"
        e_info_start "Updating jails with point of no return"
        env PAGER=cat freebsd-update -b /usr/jails/sharedfs/$_VERSION -f /usr/jails/template/$_VERSION/etc/freebsd-update.conf fetch install
        info "Successfully updated jails"
        e_info_start "Starting jails"
        /etc/rc.d/jail restart
        e_info_end
        ;;
    -c)
        # Parse the target and ensure it exists.
        if [ $# -eq 0 ]; then # No target was given, so show the command's help.
            e_die "Jail name not provided."
        elif [ $# -eq 1 ]; then
            e_die "Epair not provided."
        elif [ $# -eq 2 ]; then
            _JAILNAME="${1}"
            if grep -q $_JAILNAME /etc/jail.conf; then
                e_die "[${_JAILNAME}]: Already exists"
            fi
            # Ensure the target exists.
            if [ -d "/usr/jails/${_JAILNAME}" ]; then
                e_die "[${_JAILNAME}]: Already exists"
            fi
            _EPAIR="${2}"
            if grep -q epair$_EPAIR /etc/jail.conf; then
                e_die "[${_EPAIR}]: Already exists"
            fi
            # Ensure the target exists.
            if ifconfig -l | grep -q epair$_EPAIR; then
                e_die "[${_EPAIR}]: Already exists"
            fi
            create_jail $_JAILNAME $_EPAIR
        else
            usage
        fi
        ;;
    *) # Filter out all non-commands
        e_warn "Illegal option ${CMD}"
        usage
        ;;
    esac
}

main "$@"
