# shellcheck disable=SC3043

# BEGIN: libsh.sh

#
# Copyright 2019 Fletcher Nichol and/or applicable contributors.
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license (see
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option. This
# file may not be copied, modified, or distributed except according to those
# terms.
#
# libsh.sh
# --------
# project: https://github.com/fnichol/libsh
# author: Fletcher Nichol <fnichol@nichol.ca>
# version: 0.10.1
# distribution: libsh.full.sh
# commit-hash: 46134771903ba66967666ca455f73ffc10dd0a03
# commit-date: 2021-05-08
# artifact: https://github.com/fnichol/libsh/releases/download/v0.10.1/libsh.full.sh
# source: https://github.com/fnichol/libsh/tree/v0.10.1
# archive: https://github.com/fnichol/libsh/archive/v0.10.1.tar.gz
#

# Creates a temporary directory and prints the name to standard output.
#
# Most system use the first no-argument version, however Mac OS X 10.10
# (Yosemite) and older don't allow the no-argument version, hence the second
# fallback version.
#
# All tested invocations will create a file in each platform's suitable
# temporary directory.
#
# * `@param [optional, String]` parent directory
# * `@stdout` path to temporary directory
# * `@return 0` if successful
#
# # Examples
#
# Basic usage:
#
# ```sh
# dir="$(mktemp_directory)"
# # use directory
# ```
#
# With a custom parent directory:
#
# ```sh
# dir="$(mktemp_directory "$HOME")"
# # use directory
# ```

# shellcheck disable=SC2120
mktemp_directory() {
  need_cmd mktemp

  if [ -n "${1:-}" ]; then
    mktemp -d "$1/tmp.XXXXXX"
  else
    mktemp -d 2>/dev/null || mktemp -d -t tmp
  fi
}

# Creates a temporary file and prints the name to standard output.
#
# Most systems use the first no-argument version, however Mac OS X 10.10
# (Yosemite) and older don't allow the no-argument version, hence the second
# fallback version.

# All tested invocations will create a file in each platform's suitable
# temporary directory.
#
# * `@param [optional, String]` parent directory
# * `@stdout` path to temporary file
# * `@return 0` if successful
#
# # Examples
#
# Basic usage:
#
# ```sh
# file="$(mktemp_file)"
# # use file
# ```
#
# With a custom parent directory:
#
# ```sh
# dir="$(mktemp_file $HOME)"
# # use file
# ```

# shellcheck disable=SC2120
mktemp_file() {
  need_cmd mktemp

  if [ -n "${1:-}" ]; then
    mktemp "$1/tmp.XXXXXX"
  else
    mktemp 2>/dev/null || mktemp -t tmp
  fi
}

# Removes any tracked files registered via [`cleanup_file`].
#
# * `@return 0` whether or not an error has occurred
#
# [`cleanup_file`]: #cleanup_file
#
# # Global Variables
#
# * `__CLEANUP_FILES__` used to track the collection of files to clean up whose
#   value is a file. If not declared or set, this function will assume there is
#   no work to do.
#
# # Examples
#
# Basic usage:
#
# ```sh
# trap trap_cleanup_files 1 2 3 15 ERR EXIT
#
# file="$(mktemp_file)"
# cleanup_file "$file"
# # do work on file, etc.
# ```
trap_cleanup_files() {
  set +e

  if [ -n "${__CLEANUP_FILES__:-}" ] && [ -f "$__CLEANUP_FILES__" ]; then
    local _file
    while read -r _file; do
      rm -f "$_file"
    done <"$__CLEANUP_FILES__"
    unset _file
    rm -f "$__CLEANUP_FILES__"
  fi
}

# Prints an error message and exits with a non-zero code if the program is not
# available on the system PATH.
#
# * `@param [String]` program name
# * `@stderr` a warning message is printed if program cannot be found
#
# # Environment Variables
#
# * `PATH` indirectly used to search for the program
#
# # Notes
#
# If the program is not found, this function calls `exit` and will **not**
# return.
#
# # Examples
#
# Basic usage, when used as a guard or prerequisite in a function:
#
# ```sh
# need_cmd git
# ```
need_cmd() {
  if ! check_cmd "$1"; then
    e_die "Required command '$1' not found on PATH"
  fi
}

# Removes any tracked files and directories registered via [`cleanup_file`]
# and [`cleanup_directory`] respectively.
#
# * `@return 0` whether or not an error has occurred
#
# [`cleanup_directory`]: #cleanup_directory
# [`cleanup_file`]: #cleanup_file
#
# # Examples
#
# Basic usage:
#
# ```sh
# trap trap_cleanups 1 2 3 15 ERR EXIT
# ```
#
# Used with [`setup_traps`]:
#
# ```sh
# setup_traps trap_cleanups
# ```
#
# [`setup_traps`]: #setup_traps
trap_cleanups() {
  set +e

  trap_cleanup_directories
  trap_cleanup_files
}

# Prints program version information to standard out.
#
# The minimal implementation will output the program name and version,
# separated with a space, such as `my-program 1.2.3`. However, if the Git
# program is detected and the current working directory is under a Git
# repository, then more information will be displayed. Namely, the short Git
# SHA and author commit date will be appended in parenthesis at end of the
# line. For example, `my-program 1.2.3 (abc123 2000-01-02)`. Alternatively, if
# the Git commit information is known ahead of time, it can be provided via
# optional arguments.
#
# If verbose mode is enable by setting the optional third argument to a
# `true`, then a detailed version report will be appended to the
# single line "simple mode". Assuming that the Git program is available and the
# current working directory is under a Git repository, then three extra lines
# will be emitted:
#
# 1. `release: 1.2.3` the version string
# 2. `commit-hash: abc...` the full Git SHA of the current commit
# 3. `commit-date: 2000-01-02` the author commit date of the current commit
#
# If Git is not found and no additional optional arguments are provided, then
# only the `release: 1.2.3` line will be emitted for verbose mode.
#
# Finally, if the Git repository is not "clean", that is if it contains
# uncommitted or modified files, a `-dirty` suffix will be added to the short
# and long Git SHA refs to signal that the implementation may not perfectly
# correspond to a SHA commit.
#
# * `@param [String]` program name
# * `@param [String]` version string
# * `@param [optional, String]` verbose mode set if value if `"true"`
# * `@param [optional, String]` short Git SHA
# * `@param [optional, String]` long Git SHA
# * `@param [optional, String]` commit/version date
# * `@stdout` version information
# * `@return 0` if successful
#
# Note that the implementation for this function was inspired by Rust's [`cargo
# version`](https://git.io/fjsOh).
#
# # Examples
#
# Basic usage:
#
# ```sh
# print_version "my-program" "1.2.3"
# ```
#
# An optional third argument puts the function in verbose mode and more detail
# is output to standard out:
#
# ```sh
# print_version "my-program" "1.2.3" "true"
# ```
#
# An empty third argument is the same as only providing two arguments (i.e.
# non-verbose):
#
# ```sh
# print_version "my-program" "1.2.3" ""
# ```
print_version() {
  local _program _version _verbose _sha _long_sha _date
  _program="$1"
  _version="$2"
  _verbose="${3:-false}"
  _sha="${4:-}"
  _long_sha="${5:-}"
  _date="${6:-}"

  if [ -z "$_sha" ] || [ -z "$_long_sha" ] || [ -z "$_date" ]; then
    if check_cmd git \
      && git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      if [ -z "$_sha" ]; then
        _sha="$(git show -s --format=%h)"
        if ! git diff-index --quiet HEAD --; then
          _sha="${_sha}-dirty"
        fi
      fi
      if [ -z "$_long_sha" ]; then
        _long_sha="$(git show -s --format=%H)"
        case "$_sha" in
          *-dirty) _long_sha="${_long_sha}-dirty" ;;
        esac
      fi
      if [ -z "$_date" ]; then
        _date="$(git show -s --format=%ad --date=short)"
      fi
    fi
  fi

  if [ -n "$_sha" ] && [ -n "$_date" ]; then
    echo "$_program $_version ($_sha $_date)"
  else
    echo "$_program $_version"
  fi

  if [ "$_verbose" = "true" ]; then
    echo "release: $_version"
    if [ -n "$_long_sha" ]; then
      echo "commit-hash: $_long_sha"
    fi
    if [ -n "$_date" ]; then
      echo "commit-date: $_date"
    fi
  fi

  unset _program _version _verbose _sha _long_sha _date
}

# Prints a warning message to standard out.
#
# * `@param [String]` warning text
# * `@stdout` warning heading text
# * `@return 0` if successful
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Examples
#
# Basic usage:
#
# ```sh
# e_warn "Could not connect to service"
# ```
e_warn() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\033[1;31;40m!!! \033[1;37;40m%s\033[0m\n" "$1"
      ;;
    *)
      printf -- "!!! %s\n" "$1"
      ;;
  esac
}

# Prints a section-delimiting header to standard out.
#
# * `@param [String]` section heading text
# * `@stdout` section heading text
# * `@return 0` if successful
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Examples
#
# Basic usage:
#
# ```sh
# e_header "Building project"
# ```
e_header() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\033[1;36;40m--- \033[1;37;40m%s\033[0m\n" "$1"
      ;;
    *)
      printf -- "--- %s\n" "$1"
      ;;
  esac
}

# Sets up state to track directories for later cleanup in a trap handler.
#
# This function is typically used in combination with [`cleanup_directory`] and
# [`trap_cleanup_directories`].
#
# * `@return 0` if successful
# * `@return 1` if a temp file could not be created
#
# # Global Variables
#
# * `__CLEANUP_DIRECTORIES__` used to track the collection of directories to
# clean up whose value is a file. If not declared or set, this function will
# set it up.
# * `__CLEANUP_DIRECTORIES_SETUP__` used to track if the
# `__CLEANUP_DIRECTORIES__` variable has been set up for the current process
#
# # Examples
#
# Basic usage:
#
# ```sh
# setup_cleanup_directories
# ```
#
# Used with [`cleanup_directory`], [`setup_traps`], and
# [`trap_cleanup_directories`]:
#
# ```sh
# setup_cleanup_directories
# setup_traps trap_cleanup_directories
#
# dir="$(mktemp_directory)"
# cleanup_directory "$dir"
# # do work on directory, etc.
# ```
#
# [`cleanup_file`]: #cleanup_file
# [`setup_traps`]: #setup_traps
# [`trap_cleanup_directories`]: #trap_cleanup_directories
setup_cleanup_directories() {
  if [ "${__CLEANUP_DIRECTORIES_SETUP__:-}" != "$$" ]; then
    unset __CLEANUP_DIRECTORIES__
    __CLEANUP_DIRECTORIES_SETUP__="$$"
    export __CLEANUP_DIRECTORIES_SETUP__
  fi

  # If a tempfile hasn't been setup yet, create it
  if [ -z "${__CLEANUP_DIRECTORIES__:-}" ]; then
    __CLEANUP_DIRECTORIES__="$(mktemp_file)"

    # If the result string is empty, tempfile wasn't created so report failure
    if [ -z "$__CLEANUP_DIRECTORIES__" ]; then
      return 1
    fi

    export __CLEANUP_DIRECTORIES__
  fi
}

# Sets up state to track files for later cleanup in a trap handler.
#
# This function is typically used in combination with [`cleanup_file`] and
# [`trap_cleanup_files`].
#
# * `@return 0` if successful
# * `@return 1` if a temp file could not be created
#
# # Global Variables
#
# * `__CLEANUP_FILES__` used to track the collection of files to clean up whose
#   value is a file. If not declared or set, this function will set it up.
# * `__CLEANUP_FILES_SETUP__` used to track if the `__CLEANUP_FILES__`
# variable has been set up for the current process
#
# # Examples
#
# Basic usage:
#
# ```sh
# setup_cleanup_files
# ```
#
# Used with [`cleanup_file`], [`setup_traps`], and [`trap_cleanup_files`]:
#
# ```sh
# setup_cleanup_files
# setup_traps trap_cleanup_files
#
# file="$(mktemp_file)"
# cleanup_file "$file"
# # do work on file, etc.
# ```
#
# [`cleanup_file`]: #cleanup_file
# [`setup_traps`]: #setup_traps
# [`trap_cleanup_files`]: #trap_cleanup_files
setup_cleanup_files() {
  if [ "${__CLEANUP_FILES_SETUP__:-}" != "$$" ]; then
    unset __CLEANUP_FILES__
    __CLEANUP_FILES_SETUP__="$$"
    export __CLEANUP_FILES_SETUP__
  fi

  # If a tempfile hasn't been setup yet, create it
  if [ -z "${__CLEANUP_FILES__:-}" ]; then
    __CLEANUP_FILES__="$(mktemp_file)"

    # If the result string is empty, tempfile wasn't created so report failure
    if [ -z "$__CLEANUP_FILES__" ]; then
      return 1
    fi

    export __CLEANUP_FILES__
  fi
}

# Sets up state to track files and directories for later cleanup in a trap
# handler.
#
# This function is typically used in combination with [`cleanup_file`] and
# [`cleanup_directory`] as well as [`trap_cleanups`].
#
# * `@return 0` if successful
# * `@return 1` if the setup was not successful
#
# # Examples
#
# Basic usage:
#
# ```sh
# setup_cleanups
# ```
#
# Used with [`cleanup_directory`], [`cleanup_file`], [`setup_traps`], and
# [`trap_cleanups`]:
#
# ```sh
# setup_cleanups
# setup_traps trap_cleanups
#
# file="$(mktemp_file)"
# cleanup_file "$file"
# # do work on file, etc.
#
# dir="$(mktemp_directory)"
# cleanup_directory "$dir"
# # do work on directory, etc.
# ```
#
# [`cleanup_directory`]: #cleanup_directory
# [`cleanup_file`]: #cleanup_file
# [`setup_traps`]: #setup_traps
# [`trap_cleanups`]: #trap_cleanups
setup_cleanups() {
  setup_cleanup_directories
  setup_cleanup_files
}

# Sets up traps for `EXIT` and common signals with the given cleanup function.
#
# In addition to `EXIT`, the `HUP`, `INT`, `QUIT`, `ALRM`, and `TERM` signals
# are also covered.
#
# This implementation was based on a very nice, portable signal handling thread
# thanks to an implementation on
# [Stack Overflow](https://unix.stackexchange.com/a/240736).
#
# * `@param [String]` name of function to run with traps
#
# # Examples
#
# Basic usage with a simple "hello world" cleanup function:
#
# ```sh
# hello_trap() {
#   echo "Hello, trap!"
# }
#
# setup_traps hello_trap
# ```
#
# If the cleanup is simple enough to be a one-liner, you can provide the
# command as the single argument:
#
# ```sh
# setup_traps "echo 'Hello, World!'"
# ```
setup_traps() {
  local _sig
  for _sig in HUP INT QUIT ALRM TERM; do
    trap "
      $1
      trap - $_sig EXIT
      kill -s $_sig "'"$$"' "$_sig"
  done

  if [ -n "${ZSH_VERSION:-}" ]; then
    # Zsh uses the `EXIT` trap for a function if declared in a function.
    # Instead, use the `zshexit()` hook function which targets the exiting of a
    # shell interpreter. Additionally, a function in Zsh is not a closure over
    # outer variables, so we'll use `eval` to construct the function body
    # containing the cleanup function to invoke.
    #
    # See:
    # * https://stackoverflow.com/a/22794374
    # * http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions
    eval "zshexit() { eval '$1'; }"
  else
    # shellcheck disable=SC2064
    trap "$1" EXIT
  fi

  unset _sig
}

# Removes any tracked directories registered via [`cleanup_directory`].
#
# * `@return 0` whether or not an error has occurred
#
# [`cleanup_directory`]: #cleanup_directory
#
# # Global Variables
#
# * `__CLEANUP_DIRECTORIES__` used to track the collection of files to clean up
#   whose value is a file. If not declared or set, this function will assume
#   there is no work to do.
#
# # Examples
#
# Basic usage:
#
# ```sh
# trap trap_cleanup_directories 1 2 3 15 ERR EXIT
#
# dir="$(mktemp_directory)"
# cleanup_directory "$dir"
# # do work on directory, etc.
# ```
trap_cleanup_directories() {
  set +e

  if [ -n "${__CLEANUP_DIRECTORIES__:-}" ] \
    && [ -f "$__CLEANUP_DIRECTORIES__" ]; then
    local _dir
    while read -r _dir; do
      rm -rf "$_dir"
    done <"$__CLEANUP_DIRECTORIES__"
    unset _dir
    rm -f "$__CLEANUP_DIRECTORIES__"
  fi
}

# Determines whether or not a program is available on the system PATH.
#
# * `@param [String]` program name
# * `@return 0` if program is found on system PATH
# * `@return 1` if program is not found
#
# # Environment Variables
#
# * `PATH` indirectly used to search for the program
#
# # Examples
#
# Basic usage, when used as a conditional check:
#
# ```sh
# if check_cmd git; then
#   echo "Found Git"
# fi
# ```
check_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    return 1
  fi
}

# Tracks a directory for later cleanup in a trap handler.
#
# This function can be called immediately after a temp directory is created,
# before a directory is created, or long after a directory exists. When used in
# combination with [`trap_cleanup_directories`], all directories registered by
# calling `cleanup_directory` will be removed if they exist when
# `trap_cleanup_directories` is invoked.
#
# * `@param [String]` path to directory
# * `@return 0` if successful
# * `@return 1` if a temp file could not be created
#
# [`trap_cleanup_directories`]: #trap_cleanup_directories
#
# # Global Variables
#
# * `__CLEANUP_DIRECTORIES__` used to track the collection of directories to
#   clean up whose value is a file. If not declared or set, this function will
#   set it up.
#
# # Examples
#
# Basic usage:
#
# ```sh
# dir="$(mktemp_directory)"
# cleanup_directory "$dir"
# # do work on directory, etc.
# ```
cleanup_directory() {
  setup_cleanup_directories
  echo "$1" >>"$__CLEANUP_DIRECTORIES__"
}

# Tracks a file for later cleanup in a trap handler.
#
# This function can be called immediately after a temp file is created, before
# a file is created, or long after a file exists. When used in combination with
# [`trap_cleanup_files`], all files registered by calling `cleanup_file` will
# be removed if they exist when `trap_cleanup_files` is invoked.
#
# * `@param [String]` path to file
# * `@return 0` if successful
# * `@return 1` if a temp file could not be created
#
# [`trap_cleanup_files`]: #trap_cleanup_files
#
# # Global Variables
#
# * `__CLEANUP_FILES__` used to track the collection of files to clean up whose
#   value is a file. If not declared or set, this function will set it up.
#
# # Examples
#
# Basic usage:
#
# ```sh
# file="$(mktemp_file)"
# cleanup_file "$file"
# # do work on file, etc.
# ```
cleanup_file() {
  setup_cleanup_files
  echo "$1" >>"$__CLEANUP_FILES__"
}

# Prints an error message to standard error and exits with a non-zero exit
# code.
#
# * `@param [String]` e_warning text
# * `@stderr` e_warning text message
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Notes
#
# This function calls `exit` and will **not** return.
#
# # Examples
#
# Basic usage:
#
# ```sh
# e_die "No program to download tarball"
# ```
e_die() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\n\033[1;31;40mxxx \033[1;37;40m%s\033[0m\n\n" "$1" >&2
      ;;
    *)
      printf -- "\nxxx %s\n\n" "$1" >&2
      ;;
  esac

  exit 1
}

# Downloads the contents at the given URL to the given local file.
#
# This implementation attempts to use the `curl` program with a fallback to the
# `wget` program with a fallback to the `ftp` program and a final fallback to
# the `fetch` program. The first download program to succeed is used and if all
# fail, this function returns a non-zero code.
#
# * `@param [String]` download URL
# * `@param [String]` destination file
# * `@return 0` if a download was successful
# * `@return 1` if a download was not successful
#
# # Notes
#
# At least one of `curl`, `wget`, or `ftp` must be compiled with SSL/TLS
# support to be able to download from `https` sources.
#
# # Examples
#
# Basic usage:
#
# ```sh
# download http://example.com/file.txt /tmp/file.txt
# ```
download() {
  local _url _dst _code _orig_flags
  _url="$1"
  _dst="$2"

  need_cmd sed

  # Attempt to download with curl, if found. If successful, quick return
  if check_cmd curl; then
    info "Downloading $_url to $_dst (curl)"
    _orig_flags="$-"
    set +e
    curl -sSfL "$_url" -o "$_dst"
    _code="$?"
    set "-$(echo "$_orig_flags" | sed s/s//g)"
    if [ $_code -eq 0 ]; then
      unset _url _dst _code _orig_flags
      return 0
    else
      local _e
      _e="curl failed to download file, perhaps curl doesn't have"
      _e="$_e SSL support and/or no CA certificates are present?"
      e_warn "$_e"
      unset _e
    fi
  fi

  # Attempt to download with wget, if found. If successful, quick return
  if check_cmd wget; then
    info "Downloading $_url to $_dst (wget)"
    _orig_flags="$-"
    set +e
    wget -q -O "$_dst" "$_url"
    _code="$?"
    set "-$(echo "$_orig_flags" | sed s/s//g)"
    if [ $_code -eq 0 ]; then
      unset _url _dst _code _orig_flags
      return 0
    else
      local _e
      _e="wget failed to download file, perhaps wget doesn't have"
      _e="$_e SSL support and/or no CA certificates are present?"
      e_warn "$_e"
      unset _e
    fi
  fi

  # Attempt to download with ftp, if found. If successful, quick return
  if check_cmd ftp; then
    info "Downloading $_url to $_dst (ftp)"
    _orig_flags="$-"
    set +e
    ftp -o "$_dst" "$_url"
    _code="$?"
    set "-$(echo "$_orig_flags" | sed s/s//g)"
    if [ $_code -eq 0 ]; then
      unset _url _dst _code _orig_flags
      return 0
    else
      local _e
      _e="ftp failed to download file, perhaps ftp doesn't have"
      _e="$_e SSL support and/or no CA certificates are present?"
      e_warn "$_e"
      unset _e
    fi
  fi

  # Attempt to download with fetch, if found. If successful, quick return
  if check_cmd fetch; then
    info "Downloading $_url to $_dst (fetch)"
    _orig_flags="$-"
    set +e
    fetch -qR "$_url" -o "$_dst"
    _code="$?"
    set "-$(echo "$_orig_flags" | sed s/s//g)"
    if [ $_code -eq 0 ]; then
      unset _url _dst _code _orig_flags
      return 0
    else
      local _e
      _e="fetch failed to download file, perhaps fetch doesn't have"
      _e="$_e SSL support and/or no CA certificates are present?"
      e_warn "$_e"
      unset _e
    fi
  fi

  unset _url _dst _code _orig_flags
  # If we reach this point, curl, wget and ftp have failed and we're out of
  # options
  e_warn "Downloading requires SSL-enabled 'curl', 'wget', or 'ftp' on PATH"
  return 1
}

# Indents the output from a command while preserving the command's exit code.
#
# In minimal/POSIX shells there is no support for `set -o pipefail` which means
# that the exit code of the first command in a shell pipeline won't be
# addressable in an easy way. This implementation uses a temp file to ferry the
# original command's exit code from a subshell back into the main function. The
# output can be aligned with a pipe to `sed` as before but now we have an
# implementation which mimics a `set -o pipefail` which should work on all
# Bourne shells. Note that the `set -o errexit` is disabled during the
# command's invocation so that its exit code can be captured.
#
# Based on implementation from [Stack
# Overflow](https://stackoverflow.com/a/54931544)
#
# * `@param [String[]]` command and arguments
# * `@return` the exit code of the command which was executed
#
# # Notes
#
# In order to preserve the output order of the command, the `stdout` and
# `stderr` streams are combined, so the command will not emit its `stderr`
# output to the caller's `stderr` stream.
#
# # Examples
#
# Basic usage:
#
# ```sh
# indent cat /my/file
# ```
indent() {
  local _ecfile _ec _orig_flags

  need_cmd cat
  need_cmd rm
  need_cmd sed

  _ecfile="$(mktemp_file)"

  _orig_flags="$-"
  set +e
  {
    "$@" 2>&1
    echo "$?" >"$_ecfile"
  } | sed 's/^/       /'
  set "-$(echo "$_orig_flags" | sed s/s//g)"
  _ec="$(cat "$_ecfile")"
  rm -f "$_ecfile"

  unset _ecfile _orig_flags
  return "${_ec:-5}"
}

# Prints an informational, detailed step to standard out.
#
# * `@param [String]` informational text
# * `@stdout` informational heading text
# * `@return 0` if successful
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Examples
#
# Basic usage:
#
# ```sh
# info "Downloading tarball"
# ```
info() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\033[1;36;40m  - \033[1;37;40m%s\033[0m\n" "$1"
      ;;
    *)
      printf -- "  - %s\n" "$1"
      ;;
  esac
}

# Completes printing an informational, detailed step to standard out which has
# no output, started with `e_info_start`
#
# * `@stdout` informational heading text
# * `@return 0` if successful
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Examples
#
# Basic usage:
#
# ```sh
# e_info_end
# ```
e_info_end() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\033[1;36;40m✔✔✔ \033[1;37;40m%s\033[0m\n" "DONE."
      ;;
    *)
      printf -- "%s\n" "done."
      ;;
  esac
}

# Prints an informational, detailed step to standard out which has no output.
#
# * `@param [String]` informational text
# * `@stdout` informational heading text
# * `@return 0` if successful
#
# # Environment Variables
#
# * `TERM` used to determine whether or not the terminal is capable of printing
#   colored output.
#
# # Examples
#
# Basic usage:
#
# ```sh
# e_info_start "Copying file"
# ```
e_info_start() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      printf -- "\033[1;36;40m  - \033[1;37;40m%s ... \033[0m\n" "$1"
      ;;
    *)
      printf -- "  - %s ... " "$1"
      ;;
  esac
}

# END: libsh.sh

# BEGIN: getoptions

# shellcheck disable=SC2016
getoptions() {
	_error='' _on=1 _no='' _export='' _plus='' _mode='' _alt='' _rest='' _def=''
	_flags='' _nflags='' _opts='' _help='' _abbr='' _cmds='' _init=@empty IFS=' '
	[ $# -lt 2 ] && set -- "${1:?No parser definition}" -
	[ "$2" = - ] && _def=getoptions_parse

	i='					'
	while eval "_${#i}() { echo \"$i\$@\"; }"; [ "$i" ]; do i=${i#?}; done

	quote() {
		q="$2'" r=''
		while [ "$q" ]; do r="$r${q%%\'*}'\''" && q=${q#*\'}; done
		q="'${r%????}'" && q=${q#\'\'} && q=${q%\'\'}
		eval "$1=\${q:-\"''\"}"
	}
	code() {
		[ "${1#:}" = "$1" ] && c=3 || c=4
		eval "[ ! \${$c:+x} ] || $2 \"\$$c\""
	}
	sw() { sw="$sw${sw:+|}$1"; }
	kv() { eval "${2-}${1%%:*}=\${1#*:}"; }
	loop() { [ $# -gt 1 ] && [ "$2" != -- ]; }

	invoke() { eval '"_$@"'; }
	prehook() { invoke "$@"; }
	for i in setup flag param option disp msg; do
		eval "$i() { prehook $i \"\$@\"; }"
	done

	args() {
		on=$_on no=$_no export=$_export init=$_init _hasarg=$1 && shift
		while loop "$@" && shift; do
			case $1 in
				-?) [ "$_hasarg" ] && _opts="$_opts${1#-}" || _flags="$_flags${1#-}" ;;
				+?) _plus=1 _nflags="$_nflags${1#+}" ;;
				[!-+]*) kv "$1"
			esac
		done
	}
	defvar() {
		case $init in
			@none) : ;;
			@export) code "$1" _0 "export $1" ;;
			@empty) code "$1" _0 "${export:+export }$1=''" ;;
			@unset) code "$1" _0 "unset $1 ||:" "unset OPTARG ||:; ${1#:}" ;;
			*)
				case $init in @*) eval "init=\"=\${${init#@}}\""; esac
				case $init in [!=]*) _0 "$init"; return 0; esac
				quote init "${init#=}"
				code "$1" _0 "${export:+export }$1=$init" "OPTARG=$init; ${1#:}"
		esac
	}
	_setup() {
		[ "${1#-}" ] && _rest=$1
		while loop "$@" && shift; do kv "$1" _; done
	}
	_flag() { args '' "$@"; defvar "$@"; }
	_param() { args 1 "$@"; defvar "$@"; }
	_option() { args 1 "$@"; defvar "$@"; }
	_disp() { args '' "$@"; }
	_msg() { args '' _ "$@"; }

	cmd() { _mode=@ _cmds="$_cmds${_cmds:+|}'$1'"; }
	"$@"
	cmd() { :; }
	_0 "${_rest:?}=''"

	_0 "${_def:-$2}() {"
	_1 'OPTIND=$(($#+1))'
	_1 'while OPTARG= && [ $# -gt 0 ]; do'
	[ "$_abbr" ] && getoptions_abbr "$@"

	args() {
		sw='' validate='' pattern='' counter='' on=$_on no=$_no export=$_export
		while loop "$@" && shift; do
			case $1 in
				--\{no-\}*) i=${1#--?no-?}; sw "'--$i'|'--no-$i'" ;;
				--with\{out\}-*) i=${1#--*-}; sw "'--with-$i'|'--without-$i'" ;;
				[-+]? | --*) sw "'$1'" ;;
				*) kv "$1"
			esac
		done
		quote on "$on"
		quote no "$no"
	}
	setup() { :; }
	_flag() {
		args "$@"
		[ "$counter" ] && on=1 no=-1 v="\$((\${$1:-0}+\$OPTARG))" || v=''
		_3 "$sw)"
		_4 '[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break'
		_4 "eval '[ \${OPTARG+x} ] &&:' && OPTARG=$on || OPTARG=$no"
		valid "$1" "${v:-\$OPTARG}"
		_4 ';;'
	}
	_param() {
		args "$@"
		_3 "$sw)"
		_4 '[ $# -le 1 ] && set "required" "$1" && break'
		_4 'OPTARG=$2'
		valid "$1" '$OPTARG'
		_4 'shift ;;'
	}
	_option() {
		args "$@"
		_3 "$sw)"
		_4 'set -- "$1" "$@"'
		_4 '[ ${OPTARG+x} ] && {'
		_5 'case $1 in --no-*|--without-*) set "noarg" "${1%%\=*}"; break; esac'
		_5 '[ "${OPTARG:-}" ] && { shift; OPTARG=$2; } ||' "OPTARG=$on"
		_4 "} || OPTARG=$no"
		valid "$1" '$OPTARG'
		_4 'shift ;;'
	}
	valid() {
		set -- "$validate" "$pattern" "$1" "$2"
		[ "$1" ] && _4 "$1 || { set -- ${1%% *}:\$? \"\$1\" $1; break; }"
		[ "$2" ] && {
			_4 "case \$OPTARG in $2) ;;"
			_5 '*) set "pattern:'"$2"'" "$1"; break'
			_4 "esac"
		}
		code "$3" _4 "${export:+export }$3=\"$4\"" "${3#:}"
	}
	_disp() {
		args "$@"
		_3 "$sw)"
		code "$1" _4 "echo \"\${$1}\"" "${1#:}"
		_4 'exit 0 ;;'
	}
	_msg() { :; }

	[ "$_alt" ] && _2 'case $1 in -[!-]?*) set -- "-$@"; esac'
	_2 'case $1 in'
	_wa() { _4 "eval 'set -- $1' \${1+'\"\$@\"'}"; }
	_op() {
		_3 "$1) OPTARG=\$1; shift"
		_wa '"${OPTARG%"${OPTARG#??}"}" '"$2"'"${OPTARG#??}"'
		_4 "$3"
	}
	_3 '--?*=*) OPTARG=$1; shift'
	_wa '"${OPTARG%%\=*}" "${OPTARG#*\=}"'
	_4 ';;'
	_3 '--no-*|--without-*) unset OPTARG ;;'
	[ "$_alt" ] || {
		[ "$_opts" ] && _op "-[$_opts]?*" '' ';;'
		[ ! "$_flags" ] || _op "-[$_flags]?*" - 'OPTARG= ;;'
	}
	[ "$_plus" ] && {
		[ "$_nflags" ] && _op "+[$_nflags]?*" + 'unset OPTARG ;;'
		_3 '+*) unset OPTARG ;;'
	}
	_2 'esac'
	_2 'case $1 in'
	"$@"
	rest() {
		_4 'while [ $# -gt 0 ]; do'
		_5 "$_rest=\"\${$_rest}" '\"\${$(($OPTIND-$#))}\""'
		_5 'shift'
		_4 'done'
		_4 'break ;;'
	}
	_3 '--)'
	[ "$_mode" = @ ] || _4 'shift'
	rest
	_3 "[-${_plus:++}]?*)" 'set "unknown" "$1"; break ;;'
	_3 '*)'
	case $_mode in
		@)
			_4 "case \$1 in ${_cmds:-*}) ;;"
			_5 '*) set "notcmd" "$1"; break'
			_4 'esac'
			rest ;;
		+) rest ;;
		*) _4 "$_rest=\"\${$_rest}" '\"\${$(($OPTIND-$#))}\""'
	esac
	_2 'esac'
	_2 'shift'
	_1 'done'
	_1 '[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }'
	_1 'case $1 in'
	_2 'unknown) set "Unrecognized option: $2" "$@" ;;'
	_2 'noarg) set "Does not allow an argument: $2" "$@" ;;'
	_2 'required) set "Requires an argument: $2" "$@" ;;'
	_2 'pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;'
	_2 'notcmd) set "Not a command: $2" "$@" ;;'
	_2 '*) set "Validation error ($1): $2" "$@"'
	_1 'esac'
	[ "$_error" ] && _1 "$_error" '"$@" >&2 || exit $?'
	_1 'echo "$1" >&2'
	_1 'exit 1'
	_0 '}'

	[ "$_help" ] && eval "shift 2; getoptions_help $1 $_help" ${3+'"$@"'}
	[ "$_def" ] && _0 "eval $_def \${1+'\"\$@\"'}; eval set -- \"\${$_rest}\""
	_0 '# Do not execute' # exit 1
}
# shellcheck disable=SC2016,SC2154
getoptions_abbr() {
	abbr() {
		_3 "case '$1' in"
		_4 '"$1") OPTARG=; break ;;'
		_4 '$1*) OPTARG="$OPTARG '"$1"'"'
		_3 'esac'
	}
	args() {
		abbr=1
		shift
		for i; do
			case $i in
				--) break ;;
				[!-+]*) eval "${i%%:*}=\${i#*:}"
			esac
		done
		[ "$abbr" ] || return 0

		for i; do
			case $i in
				--) break ;;
				--\{no-\}*) abbr "--${i#--\{no-\}}"; abbr "--no-${i#--\{no-\}}" ;;
				--*) abbr "$i"
			esac
		done
	}
	setup() { :; }
	for i in flag param option disp; do
		eval "_$i()" '{ args "$@"; }'
	done
	msg() { :; }
	_2 'set -- "${1%%\=*}" "${1#*\=}" "$@"'
	[ "$_alt" ] && _2 'case $1 in -[!-]?*) set -- "-$@"; esac'
	_2 'while [ ${#1} -gt 2 ]; do'
	_3 'case $1 in (*[!a-zA-Z0-9_-]*) break; esac'
	"$@"
	_3 'break'
	_2 'done'
	_2 'case ${OPTARG# } in'
	_3 '*\ *)'
	_4 'eval "set -- $OPTARG $1 $OPTARG"'
	_4 'OPTIND=$((($#+1)/2)) OPTARG=$1; shift'
	_4 'while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done'
	_4 'set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"'
	[ "$_error" ] && _4 "$_error" '"$@" >&2 || exit $?'
	_4 'echo "$1" >&2'
	_4 'exit 1 ;;'
	_3 '?*)'
	_4 '[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"'
	_4 "shift 3; eval 'set -- \"\${OPTARG# }\"' \${1+'\"\$@\"'}; OPTARG= ;;"
	_3 '*) shift 2'
	_2 'esac'
}
getoptions_help() {
	_width='30,12' _plus='' _leading='  '

	pad() { p=$2; while [ ${#p} -lt "$3" ]; do p="$p "; done; eval "$1=\$p"; }
	kv() { eval "${2-}${1%%:*}=\${1#*:}"; }
	sw() { pad sw "$sw${sw:+, }" "$1"; sw="$sw$2"; }

	args() {
		_type=$1 var=${2%% *} sw='' label='' hidden='' && shift 2
		while [ $# -gt 0 ] && i=$1 && shift && [ "$i" != -- ]; do
			case $i in
				--*) sw $((${_plus:+4}+4)) "$i" ;;
				-?) sw 0 "$i" ;;
				+?) [ ! "$_plus" ] || sw 4 "$i" ;;
				*) [ "$_type" = setup ] && kv "$i" _; kv "$i"
			esac
		done
		[ "$hidden" ] && return 0 || len=${_width%,*}

		[ "$label" ] || case $_type in
			setup | msg) label='' len=0 ;;
			flag | disp) label="$sw " ;;
			param) label="$sw $var " ;;
			option) label="${sw}[=$var] "
		esac
		[ "$_type" = cmd ] && label=${label:-$var } len=${_width#*,}
		pad label "${label:+$_leading}$label" "$len"
		[ ${#label} -le "$len" ] && [ $# -gt 0 ] && label="$label$1" && shift
		echo "$label"
		pad label '' "$len"
		for i; do echo "$label$i"; done
	}

	for i in setup flag param option disp 'msg -' cmd; do
		eval "${i% *}() { args $i \"\$@\"; }"
	done

	echo "$2() {"
	echo "cat<<'GETOPTIONSHERE'"
	"$@"
	echo "GETOPTIONSHERE"
	echo "}"
}

# END: getoptions
#
# Convert a string to lowercase
lowercase() {
  echo "$1" | tr "[:upper:]" "[:lower:]"
}

set_colors() {
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      COLOR_RESET="\033[0;0m"
      COLOR_BOLD="\033[1m"
      COLOR_UNDER="\033[4m"
      COLOR_BLINK="\033[5m"
      COLOR_INVERSE="\033[7m"
      COLOR_BLACK="\033[0;30m"
      COLOR_RED="\033[0;31m"
      COLOR_GREEN="\033[0;32m"
      COLOR_BROWN="\033[0;33m"
      COLOR_BLUE="\033[0;34m"
      COLOR_MAGENTA="\033[0;35m"
      COLOR_CYAN="\033[0;36m"
      COLOR_LIGHT_GRAY="\033[0;37m"
      COLOR_DARK_GRAY="\033[1;30m"
      COLOR_LIGHT_RED="\033[1;31m"
      COLOR_LIGHT_GREEN="\033[1;32m"
      COLOR_YELLOW="\033[1;33m"
      COLOR_LIGHT_BLUE="\033[1;34m"
      COLOR_LIGHT_MAGENTA="\033[1;35m"
      COLOR_LIGHT_CYAN="\033[1;36m"
      COLOR_WHITE="\033[1;37m"
      COLOR_BG_BLACK="\033[40m"
      COLOR_BG_RED="\033[41m"
      COLOR_BG_GREEN="\033[42m"
      COLOR_BG_BROWN="\033[43m"
      COLOR_BG_BLUE="\033[44m"
      COLOR_BG_MAGENTA="\033[45m"
      COLOR_BG_CYAN="\033[46m"
      COLOR_BG_LIGHT_GRAY="\033[47m"
      ;;
    *)
      COLOR_RESET=""
      COLOR_BOLD=""
      COLOR_UNDER=""
      COLOR_BLINK=""
      COLOR_INVERSE=""
      COLOR_BLACK=""
      COLOR_RED=""
      COLOR_GREEN=""
      COLOR_BROWN=""
      COLOR_BLUE=""
      COLOR_MAGENTA=""
      COLOR_CYAN=""
      COLOR_LIGHT_GRAY=""
      COLOR_DARK_GRAY=""
      COLOR_LIGHT_RED=""
      COLOR_LIGHT_GREEN=""
      COLOR_YELLOW=""
      COLOR_LIGHT_BLUE=""
      COLOR_LIGHT_MAGENTA=""
      COLOR_LIGHT_CYAN=""
      COLOR_WHITE=""
      COLOR_BG_BLACK=""
      COLOR_BG_RED=""
      COLOR_BG_GREEN=""
      COLOR_BG_BROWN=""
      COLOR_BG_BLUE=""
      COLOR_BG_MAGENTA=""
      COLOR_BG_CYAN=""
      COLOR_BG_LIGHT_GRAY=""
      ;;
  esac
}

seek_confirmation() {
  printf "\\n${COLOR_BOLD}%s${COLOR_RESET}" "$@"
  old_stty_cfg=$(stty -g)
  stty raw -echo
  answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
  stty $old_stty_cfg
  if echo "$answer" | grep -iq "^n" ;then
    exit 1
  fi
}

is_confirmed() {
  if echo "$answer" | grep -Eq '^[Yy]$'; then
    return 0
  fi
  return 1
}

pushover () {
  PUSHOVERURL="https://api.pushover.net/1/messages.json"
  API_KEY=$PUSHOVER_API_KEY
  USER_KEY=$PUSHOVER_USER_KEY
  DEVICE=$PUSHOVER_DEVICE

  TITLE="${1}"
  MESSAGE="${2}"

  curl \
    -F "token=${API_KEY}" \
    -F "user=${USER_KEY}" \
    -F "device=${DEVICE}" \
    -F "title=${TITLE}" \
    -F "message=${MESSAGE}" \
    "${PUSHOVERURL}" > /dev/null 2>&1
}

spinner() {
  local pid=$!
  local delay=0.1
  local spinstr='|/-\'
  case "${TERM:-}" in
    *term | alacritty | rxvt | screen | screen-* | tmux | tmux-* | xterm-*)
      while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
      done
      printf "    \b\b\b\b"
      ;;
    *)
      while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        printf "."
        sleep 2
      done
      echo " ✓ "
      ;;
  esac
}

if check_cmd bat; then
  BAT_BIN=$(command -v bat)
fi
if check_cmd curl; then
  DOWNLOAD_CMD="curl -sSfL"
elif check_cmd wget; then
  DOWNLOAD_CMD="wget -q -O -"
elif check_cmd fetch; then
  DOWNLOAD_CMD="fetch -qR -o -"
fi
if check_cmd cat; then
  CAT_BIN=$(command -v cat)
  CAT="$CAT_BIN"
fi
if check_cmd emacs; then
  EMACS_BIN=$(command -v emacs)
fi
if check_cmd fd; then
  FD_BIN=$(command -v fd)
fi
if check_cmd fortune; then
  FORTUNE_BIN=$(command -v fortune)
fi
if check_cmd fzf; then
  FZF_BIN=$(command -v fzf)
fi
if check_cmd git; then
  GIT_BIN=$(command -v git)
  GIT=${GIT_BIN}
fi
if check_cmd htop; then
  HTOP_BIN=$(command -v htop)
fi
if check_cmd kitty; then
  KITTY_BIN=$(command -v kitty)
fi
if check_cmd mkdir; then
  MKDIR="mkdir -p"
fi
if check_cmd rg; then
  RG_BIN=$(command -v rg)
fi
if check_cmd sed; then
  SED_BIN=$(command -v sed)
  SED="$SED_BIN -E"
fi
if check_cmd strfile; then
  STRFILE_BIN=$(command -v strfile)
fi
if check_cmd tmux; then
  TMUX_BIN=$(command -v tmux)
fi
if check_cmd date; then
  TODAY=$(date -u +%Y-%m-%d)
fi
if check_cmd vim; then
  VIM_BIN=$(command -v vim)
fi
if check_cmd zsh; then
ZSH_BIN=$(command -v zsh)
fi
{{- if (eq .chezmoi.os "aix" ) }}
{{- else if (eq .chezmoi.os "darwin") }}
{{- else if (eq .chezmoi.os "dragonfly" ) }}
{{- else if (eq .chezmoi.os "freebsd" ) }}
{{- else if (eq .chezmoi.os "netbsd" ) }}
{{- else if (eq .chezmoi.os "openbsd" ) }}
{{- else if (eq .chezmoi.os "solaris" ) }}
{{- else if (eq .chezmoi.os "linux" ) }}
{{- if hasKey .chezmoi.osRelease "id" }}
{{- if (eq .chezmoi.osRelease.id "alpine" ) }}
{{- else if (eq .chezmoi.osRelease.id "amzn" ) }}
{{- else if (eq .chezmoi.osRelease.id "centos" ) }}
{{- else if (eq .chezmoi.osRelease.id "debian" ) }}
if check_cmd batcat; then
  BAT_BIN=$(command -v batcat)
fi
{{- else if (eq .chezmoi.osRelease.id "fedora" ) }}
{{- else if (eq .chezmoi.osRelease.id "opensuse" ) }}
{{- else if (eq .chezmoi.osRelease.id "rhel" ) }}
{{- else if (eq .chezmoi.osRelease.id "slackware" ) }}
{{- else if (eq .chezmoi.osRelease.id "sles" ) }}
{{- else if (eq .chezmoi.osRelease.id "sles" ) }}
{{- else if (eq .chezmoi.osRelease.id "ubuntu" ) }}
if check_cmd batcat; then
  BAT_BIN=$(command -v batcat)
fi
{{- end }}
{{- end }}
{{- end }}
if check_cmd python; then
  PYTHON_BIN="python3"
elif check_cmd python3; then
  PYTHON_BIN="python3"
elif check_cmd python3.8; then
  PYTHON_BIN="python3.8"
elif check_cmd python3.9; then
  PYTHON_BIN="python3.9"
elif check_cmd python3.10; then
  PYTHON_BIN="python3.10"
elif check_cmd python3.11; then
  PYTHON_BIN="python3.11"
elif check_cmd python; then
  PYTHON_BIN="python"
elif check_cmd python2; then
  PYTHON_BIN="python2"
fi
FREEBSD_PY_DEFAULT="py39-"

# vim: ft=sh
