COLOR_RESET="\033[0;0m"
COLOR_BOLD="\033[1m"
COLOR_UNDER="\033[4m"
COLOR_BLINK="\033[5m"
COLOR_INVERSE="\033[7m"

COLOR_BLACK="\033[0;30m"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_BROWN="\033[0;33m"
COLOR_BLUE="\033[0;34m"
COLOR_MAGENTA="\033[0;35m"
COLOR_CYAN="\033[0;36m"
COLOR_LIGHT_GRAY="\033[0;37m"

COLOR_DARK_GRAY="\033[1;30m"
COLOR_LIGHT_RED="\033[1;31m"
COLOR_LIGHT_GREEN="\033[1;32m"
COLOR_YELLOW="\033[1;33m"
COLOR_LIGHT_BLUE="\033[1;34m"
COLOR_LIGHT_MAGENTA="\033[1;35m"
COLOR_LIGHT_CYAN="\033[1;36m"
COLOR_WHITE="\033[1;37m"

COLOR_BG_BLACK="\033[40m"
COLOR_BG_RED="\033[41m"
COLOR_BG_GREEN="\033[42m"
COLOR_BG_BROWN="\033[43m"
COLOR_BG_BLUE="\033[44m"
COLOR_BG_MAGENTA="\033[45m"
COLOR_BG_CYAN="\033[46m"
COLOR_BG_LIGHT_GRAY="\033[47m"

e_bold() {
  printf "${bold}%s${reset}\n" "$@"
}

e_note() {
  printf "${underline}${bold}${blue}Note:${reset}  ${yellow}%s${reset}\n" "$@"
}

seek_confirmation() {
    printf "\\n${bold}%s${reset}" "$@"
    old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
    stty $old_stty_cfg
    if echo "$answer" | grep -iq "^n" ;then
        exit 1
    fi
}

# Pushover Notifications
# Usage: pushover "Title Goes Here" "Message Goes Here"
pushover () {
  PUSHOVERURL="https://api.pushover.net/1/messages.json"
  API_KEY=$PUSHOVER_API_KEY
  USER_KEY=$PUSHOVER_USER_KEY
  DEVICE=$PUSHOVER_DEVICE

  TITLE="${1}"
  MESSAGE="${2}"

  curl \
    -F "token=${API_KEY}" \
    -F "user=${USER_KEY}" \
    -F "device=${DEVICE}" \
    -F "title=${TITLE}" \
    -F "message=${MESSAGE}" \
    "${PUSHOVERURL}" > /dev/null 2>&1
}

################################################################################
#
# Set Colors
#
# Use colors, but only if connected to a terminal, and that terminal
# supports them.
#if which tput >/dev/null 2>&1; then
  #[ -z $TERM ] && TPUTTERM='-T xterm-256color' || TPUTTERM=''
#  [ -z $TERM ] && TPUTTERM='-T dumb' || TPUTTERM=''
#  ncolors=$(tput colors "$TPUTTERM" 2>&1)
#fi
if [ -t 1 ]; then
#  && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    bold="$(tput bold)"
    underline=$(tput sgr 0 1)
    reset="$(tput sgr0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    purple=$(tput setaf 171)
    tan=$(tput setaf 3)
else
    bold=""
    underline=""
    reset=""
    red=""
    green=""
    yellow=""
    blue=""
    purple=""
    tan=""
fi

set_sudo() {
  if check_cmd sudo; then
    if sudo -vn 2>&1 | grep 'password' > /dev/null; then
      SUDO_CMD=$(command -v sudo)
    else
      SUDO_CMD=""
    fi
  fi
}

set_sudo

{{ if (ne .chezmoi.os "darwin") -}}
check_packagemgr() {
  if check_cmd yum; then
    PKG_BIN=$(command -v yum)
    PKG_CMD="$SUDO_CMD $PKG_BIN -y -qq install"
  elif check_cmd pkg; then
    PKG_BIN=$(command -v pkg)
    PKG_CMD="$SUDO_CMD $PKG_BIN install -y"
  elif check_cmd pkg_add; then
    PKG_BIN=$(command -v pkg_add)
    PKG_CMD="$SUDO_CMD $PKG_BIN -U -I -x"
  elif check_cmd apk; then
    PKG_BIN=$(command -v apk)
    PKG_CMD="$SUDO_CMD $PKG_BIN add"
  elif check_cmd apt; then
    PKG_BIN=$(command -v apt)
    PKG_CMD="$SUDO_CMD $PKG_BIN -y install"
  fi
}
{{ end }}

set_download() {
  if check_cmd curl; then
    DOWNLOAD_BIN=$(command -v curl)
    DOWNLOAD_CMD="$DOWNLOAD_BIN -fsSL"
  elif check_cmd wget; then
    DOWNLOAD_BIN=$(command -v wget)
    DOWNLOAD_CMD="$DOWNLOAD_BIN -q -O-"
  elif check_cmd fetch; then
    DOWNLOAD_BIN=$(command -v fetch)
    DOWNLOAD_CMD="$DOWNLOAD_BIN -q -o -"
  elif check_cmd curlie; then
    DOWNLOAD_BIN=$(command -v curlie)
    DOWNLOAD_CMD="$DOWNLOAD_BIN -fsSL"
  fi
}

set_download
{{ if (ne .chezmoi.os "darwin") -}}
check_packagemgr
{{ end }}

CHEZMOI_OS={{ .chezmoi.os }}
CHEZMOI_ARCH={{ .chezmoi.arch }}

AG_BIN=$(command -v ag)
BAT_BIN=$(command -v bat)
BAT_PKG="bat"
CAT_BIN=$(command -v cat)
CAT="$CAT_BIN"
EMACS_BIN=$(command -v emacs)
{{ if .headless -}}
EMACS_PKG="emacs-nox"
{{ else }}
EMACS_PKG="emacs"
{{ end }}
FD_BIN=$(command -v fd)
FD_PKG="fd-find"
FORTUNE_BIN=$(command -v fortune)
FZF_BIN=$(command -v fzf)
FZF_PKG="fzf"
FZF_VERSION="0.42.0"
GIT_BIN=$(command -v git)
GIT_PKG="git"
HTOP_BIN=$(command -v htop)
HTOP_PKG="htop"
KITTY_BIN=$(command -v kitty)
KITTY_PKG="kitty"
MKDIR_BIN=$(command -v mkdir)
MKDIR="${MKDIR_BIN} -p"
RG_BIN=$(command -v rg)
RG_PKG="ripgrep"
SED_BIN=$(command -v sed)
SED="$SED_BIN"
STRFILE_BIN=$(command -v strfile)
TMUX_BIN=$(command -v tmux)
TMUX_PKG="tmux"
VIM_BIN=$(command -v vim)
VIM_PKG="vim"
ZSH_BIN=$(command -v zsh)
ZSH_PKG="zsh"
#openssh
#tree
#asciinema
#awscli
#bottom
#bpytop
#broot
#caddy
#emacs
#choose
#cookiecutter
#curl
#dstask
#duf
#dust
#exa
#getdns
#gh
#git-delta
#glances
#gnupg
#gopass
#grex
#hey
#hping
#httpd
#httpie
#jq
#kubernetes-cli
#ldns
#lftp
#lynx
#mtr
#neofetch
#nmap
#opensc
#pwgen
#qemu
#ranger
#rsync
#sd
#shellcheck
#tealdeer
#thefuck
#vegeta
#w3m
#wget
#wireguard-tools
#wrk
#wtfutil
{{- if (eq .chezmoi.os "aix" ) }}
{{- else if (eq .chezmoi.os "darwin") }}
{{- else if (eq .chezmoi.os "dragonfly" ) }}
{{- else if (eq .chezmoi.os "freebsd" ) }}
GIT_PKG="git-lite"
{{- else if (eq .chezmoi.os "netbsd" ) }}
{{- else if (eq .chezmoi.os "openbsd" ) }}
{{- else if (eq .chezmoi.os "solaris" ) }}
{{- else if (eq .chezmoi.os "linux" ) }}
{{- if hasKey .chezmoi.osRelease "id" }}
{{- if (eq .chezmoi.osRelease.id "alpine" ) }}
{{- else if (eq .chezmoi.osRelease.id "amzn" ) }}
{{- else if (eq .chezmoi.osRelease.id "arch" ) }}
{{- else if (eq .chezmoi.osRelease.id "centos" ) }}
{{- else if (eq .chezmoi.osRelease.id "debian" ) }}
BAT_BIN=$(command -v batcat)
VIM_PKG="vim-nox"
{{- else if (eq .chezmoi.osRelease.id "fedora" ) }}
{{- else if (eq .chezmoi.osRelease.id "opensuse" ) }}
{{- else if (eq .chezmoi.osRelease.id "rhel" ) }}
{{- else if (eq .chezmoi.osRelease.id "slackware" ) }}
{{- else if (eq .chezmoi.osRelease.id "sles" ) }}
{{- else if (eq .chezmoi.osRelease.id "ubuntu" ) }}
BAT_BIN=$(command -v batcat)
STRFILE_PKG="fortune-mod"
VIM_PKG="vim-nox"
{{- end }}
{{- end }}
{{- end }}
if check_cmd python3; then
  PYTHON_BIN="python3"
elif check_cmd python3.8; then
  PYTHON_BIN="python3.8"
elif check_cmd python3.9; then
  PYTHON_BIN="python3.9"
elif check_cmd python3.10; then
  PYTHON_BIN="python3.10"
elif check_cmd python3.11; then
  PYTHON_BIN="python3.11"
elif check_cmd python; then
  PYTHON_BIN="python"
elif check_cmd python2; then
  PYTHON_BIN="python2"
fi
FREEBSD_PY_DEFAULT="py39-"

# vim: ft=sh:
