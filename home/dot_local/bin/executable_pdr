#!/bin/sh

_COLOR_RESET="\033[0;0m"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_YELLOW="\033[1;33m"

_GIT_BIN=/usr/local/bin/git
_PORTGREP_BIN=/usr/local/bin/portgrep
_PORTSDIR=/usr/local/poudriere/ports/default
_PORTSLIST=/usr/local/etc/poudriere.d/ports-list/bofh.ports
_POUDRIERE_BIN=/usr/local/bin/poudriere
_SORT_BIN="/usr/bin/sort -u"
_TEMPPDR=$(basename "$0")
_TMPFILE=$(mktemp -q /tmp/${_TEMPPDR}.XXXXXX)

if [ $(hostname) = "pdr.bofh.network" ]; then
    _JAILINFRA="MAIN"
elif [ $(hostname) = "dev.bofh.network" ] || [ $(hostname) = "pkg.bofh.network" ]; then
    _JAILINFRA="132"
fi

# Notify message on error, but do not exit
error_notify() {
    echo "${COLOR_RED}$*${_COLOR_RESET}" 1>&2
}

# Notify message on error and exit
error_exit() {
    error_notify "$@"
    exit 1
}

info() {
    echo "${COLOR_GREEN}$*${_COLOR_RESET}"
}

warn() {
    echo "${COLOR_YELLOW}$*${_COLOR_RESET}"
}

usage() {
    cat << EOF
pdr is an helper script for ports developers.

Usage:
  pdr [args] [TARGET]

Available Commands:
  -p                    Build ports that belongs to bofh@FreeBSD.org
  -i                    Build ports that are required by infrastructure
  -a                    Build all equivalent to -p -i
  -t [TARGET]           Test [TARGET] port for all available jails
  help or -h or --help  Print this message

EOF
    exit 1
}

generate_ports_list() {
    ${_PORTGREP_BIN} -R /usr/local/poudriere/ports/default -o -m bofh@FreeBSD.org -O tz@FreeBSD.org > "$_TMPFILE"
    find $_PORTSDIR -type d -d 2 \( -iname "*php74*" -o -iname "*php80*" -o -iname "*php81*" -o -iname "*php82*" \) | sed -e "s|$_PORTSDIR/||g" >> "$_TMPFILE"
    ${_SORT_BIN} "$_TMPFILE" > "$_PORTSLIST"
}

update_tree() {
    cd ${_PORTSDIR} || exit
    ${_GIT_BIN} checkout working && ${_GIT_BIN} stash
    ${_GIT_BIN} checkout main && ${_GIT_BIN} pull --ff-only && ${_GIT_BIN} rebase main working
    ${_GIT_BIN} stash pop
}

build_ports() {
    for i in 124i386 124 132 MAIN
    do
        ${_POUDRIERE_BIN} pkgclean -j $i -p default -y -f ${_PORTSLIST}
        ${_POUDRIERE_BIN} logclean -j $i -y 30
        ${_POUDRIERE_BIN} bulk -j $i -t -f ${_PORTSLIST}
    done
}

build_infrastructure() {
    ${_POUDRIERE_BIN} pkgclean -j $_JAILINFRA -p default -z infrastructure -y -f /usr/local/etc/poudriere.d/ports-list/infrastructure
    ${_POUDRIERE_BIN} logclean -j $_JAILINFRA -p default -z infrastructure -y 10
    ${_POUDRIERE_BIN} bulk -j $_JAILINFRA -z infrastructure -f /usr/local/etc/poudriere.d/ports-list/infrastructure
}

test_ports() {
    for i in 124i386 124 132 MAIN
    do
        ${_POUDRIERE_BIN} bulk -j $i -t "$@"
    done
}

main() {
    [ $# -lt 1 ] && usage

    CMD=$1
    shift

    # Handle special-case commands first.
    case "${CMD}" in
    help|-h|--help)
        usage
        ;;
    -p)
        # Build ports that belongs to bofh@FreeBSD.org
        update_tree
        generate_ports_list
        build_ports
        ;;
    -i)
        # Build ports that are required by infrastructure
        update_tree
        build_infrastructure
        ;;
    -a)
        # Build all
        generate_ports_list
        update_tree
        build_infrastructure
        build_ports
        ;;
    -t)
        # Parse the target and ensure it exists.
        if [ $# -eq 0 ]; then # No target was given, so show the command's help.
            error_exit "port name not provided."
        elif [ $# -eq 1 ]; then
            TARGET="${1}"
            shift
            # Ensure the target exists. -- cwells
            if [ ! -d "${_PORTSDIR}/${TARGET%@*}" ]; then
                error_exit "[${TARGET}]: Not found."
            else
                test_ports "${TARGET}"
            fi
        else
            usage
        fi
        ;;
    *) # Filter out all non-commands
        error_notify "Illegal option ${CMD}"
        usage
        ;;
    esac
}

main "$@"
